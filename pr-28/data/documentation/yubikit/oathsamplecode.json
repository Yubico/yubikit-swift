{"kind":"article","schemaVersion":{"patch":0,"minor":3,"major":0},"metadata":{"role":"sampleCode","modules":[{"name":"YubiKit"}],"roleHeading":"Sample Code","title":"OATHSample: Basic OATH app showcasing how to integrate the SDK","color":{"standardColorIdentifier":"green"}},"sampleCodeDownload":{"action":{"isActive":true,"type":"reference","overridingTitle":"View Source","identifier":"https:\/\/github.com\/Yubico\/yubikit-swift\/raw\/main\/Samples\/oath-sample.zip"},"kind":"sampleDownload"},"hierarchy":{"paths":[["doc:\/\/YubiKit\/documentation\/YubiKit"]]},"primaryContentSections":[{"content":[{"anchor":"overview","level":2,"text":"Overview","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The sample project consist of two views. One that list the OATH codes calculated, either using USB-C, Lightning or NFC."},{"type":"text","text":" "},{"type":"text","text":"The other view simply displays the version number of the YubiKey. This view also supports all three connection types."}]},{"name":"Note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"This is only a sample project and there is currently no handling for password protected YubiKeys."}]}],"type":"aside","style":"note"},{"text":"OATH view","type":"heading","level":2,"anchor":"OATH-view"},{"type":"paragraph","inlineContent":[{"text":"The main function of the OATH part of the app is the ","type":"text"},{"type":"codeVoice","code":"startWiredConnection()"},{"type":"text","text":" function. This will cancel any previous"},{"text":" ","type":"text"},{"code":"wiredConnectionTask","type":"codeVoice"},{"text":" and create a new one. In the Task it will use the ","type":"text"},{"identifier":"doc:\/\/YubiKit\/documentation\/YubiKit\/ConnectionHelper","isActive":true,"type":"reference"},{"text":" to start waiting for","type":"text"},{"text":" ","type":"text"},{"text":"a wired connection. Depending on the device this will either be a ","type":"text"},{"type":"codeVoice","code":"LightningConnection"},{"type":"text","text":" or a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/YubiKit\/documentation\/YubiKit\/SmartCardConnection"},{"text":".","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Once a connection has been established we check that the task hasn’t been cancelled before proceeding."},{"text":" ","type":"text"},{"type":"text","text":"The "},{"code":"calculateCodes(connection:)","type":"codeVoice"},{"type":"text","text":" function creates a new "},{"identifier":"doc:\/\/YubiKit\/documentation\/YubiKit\/OATHSession","type":"reference","isActive":true},{"type":"text","text":" and"},{"type":"text","text":" "},{"type":"text","text":"calls "},{"type":"codeVoice","code":".calculateCodes()"},{"type":"text","text":" on the session. The result is then used to populate the list of codes in the UI."}]},{"inlineContent":[{"text":"At this point the app will wait for the connection to close. This can be caused by the user unplugging the YubiKey or","type":"text"},{"type":"text","text":" "},{"type":"text","text":"a connection error of some sort forcing the connection to close. If the connection is closed the app will clean up"},{"text":" ","type":"text"},{"text":"the user interface and recursively call ","type":"text"},{"code":"startWiredConnection()","type":"codeVoice"},{"text":" again.","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["@MainActor func startWiredConnection() {","    wiredConnectionTask?.cancel()","    wiredConnectionTask = Task {","        do {","            error = nil","            \/\/ Wait for a suitable wired connection for the current device.","            let connection = try await ConnectionHelper.anyWiredConnection()","            guard !Task.isCancelled else { return }","            try await self.calculateCodes(connection: connection)","            \/\/ Wait for the connection to close, i.e the YubiKey to be unplugged from the device.","            \/\/ If the YubiKey was simply unplugged it will return nil, otherwise the error","            \/\/ causing the disconnect will be returned.","            self.error = await connection.connectionDidClose()","            self.accounts.removeAll()","            self.source = \"no connection\"","            guard !Task.isCancelled else { return }","            \/\/ Restart the wired connection and go back to waiting for a YubiKey to be","            \/\/ inserted again.","            self.startWiredConnection()","        } catch {","            self.error = error","        }","    }","}","","@MainActor private func calculateCodes(connection: Connection) async throws {","    self.error = nil","    let session = try await OATHSession.session(withConnection: connection)","    let result = try await session.calculateCodes()","    self.accounts = result.map { return Account(label: $0.0.label, code: $0.1?.code ?? \"****\") }","    self.source = connection.connectionType","}"],"syntax":"swift"},{"level":2,"anchor":"Settings-view","text":"Settings view","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"To bring up the settings view we’ve added a "},{"type":"codeVoice","code":"Button"},{"text":" to the ","type":"text"},{"code":"OATHListView","type":"codeVoice"},{"type":"text","text":". The button will stop"},{"text":" ","type":"text"},{"type":"text","text":"any wired connections and cancel the wait for new connections. It will then present the "},{"type":"codeVoice","code":"SettingsView"},{"type":"text","text":" "},{"text":"as a SwiftUI sheet.","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["Button(action: { model.stopWiredConnection(); isPresentingSettings.toggle() }) {","    Image(systemName: \"ellipsis.circle\")","}",".sheet(isPresented: $isPresentingSettings, onDismiss: {","    model.startWiredConnection() \/\/ Restart wired connection once the SettingsView has been dismissed.","}, content: {","    SettingsView(model: SettingsModel())","})"]},{"inlineContent":[{"text":"The ","type":"text"},{"code":"SettingsModel","type":"codeVoice"},{"type":"text","text":" is simpler since it will only retrieve the version number once when it appears"},{"type":"text","text":" "},{"text":"and it does not handle YubiKeys being unplugged and plugged back again. In this case we can use the","type":"text"},{"text":" ","type":"text"},{"code":"ConnectionHelper.anyConnection()","type":"codeVoice"},{"text":" function that will return any wired YubiKey that might be connected","type":"text"},{"text":" ","type":"text"},{"text":"or, if no wired key is present it will start scanning for a NFC key. Once connected we create","type":"text"},{"type":"text","text":" "},{"text":"the ","type":"text"},{"type":"reference","identifier":"doc:\/\/YubiKit\/documentation\/YubiKit\/ManagementSession","isActive":true},{"text":" and get the key version.","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["@MainActor func getKeyVersion() {","    Task {","        self.error = nil","        do {","            let connection = try await ConnectionHelper.anyConnection()","            let session = try await ManagementSession.session(withConnection: connection)","            self.keyVersion = session.version.description","            #if os(iOS)","            if let nfcConnection = connection.nfcConnection {","                self.connection = \"NFC\"","                await nfcConnection.close(message: \"YubiKey version read\")","            } else {","                self.connection = connection as? SmartCardConnection != nil ? \"SmartCard\" : \"Lightning\"","            }","            #else","            self.connection = \"SmartCard\"","            #endif","        } catch {","            self.error = error","        }","    }","}"],"syntax":"swift"}],"kind":"content"}],"variants":[{"paths":["\/documentation\/yubikit\/oathsamplecode"],"traits":[{"interfaceLanguage":"swift"}]}],"abstract":[{"text":"This sample project shows how to integrate the SDK into an iOS and MacOS app. It lists OATH codes","type":"text"},{"type":"text","text":" "},{"text":"using the ","type":"text"},{"identifier":"doc:\/\/YubiKit\/documentation\/YubiKit\/OATHSession","type":"reference","isActive":true},{"type":"text","text":" and has a separate view that displays the version number of the key. The version"},{"type":"text","text":" "},{"text":"number is retrieved using the ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/YubiKit\/documentation\/YubiKit\/ManagementSession"},{"type":"text","text":"."}],"sections":[],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/YubiKit\/documentation\/YubiKit\/OATHSampleCode"},"references":{"documentation-header.png":{"variants":[{"traits":["2x","light"],"url":"\/images\/YubiKit\/documentation-header@2x.png"},{"traits":["2x","dark"],"url":"\/images\/YubiKit\/documentation-header~dark@2x.png"}],"type":"image","alt":"YubiKeys in a row","identifier":"documentation-header.png"},"doc://YubiKit/documentation/YubiKit":{"identifier":"doc:\/\/YubiKit\/documentation\/YubiKit","type":"topic","kind":"symbol","abstract":[{"text":"Connect and run commands on the different applications on a YubiKey. The framework support connecting using NFC, Lightning and USB-C.","type":"text"}],"images":[{"type":"icon","identifier":"documentation-header.png"}],"url":"\/documentation\/yubikit","title":"YubiKit","role":"collection"},"doc://YubiKit/documentation/YubiKit/OATHSession":{"title":"OATHSession","kind":"symbol","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"OATHSession","kind":"identifier"}],"abstract":[{"type":"text","text":"An interface to the OATH application on the YubiKey."}],"role":"symbol","url":"\/documentation\/yubikit\/oathsession","identifier":"doc:\/\/YubiKit\/documentation\/YubiKit\/OATHSession","navigatorTitle":[{"text":"OATHSession","kind":"identifier"}],"type":"topic"},"doc://YubiKit/documentation/YubiKit/SmartCardConnection":{"title":"SmartCardConnection","identifier":"doc:\/\/YubiKit\/documentation\/YubiKit\/SmartCardConnection","url":"\/documentation\/yubikit\/smartcardconnection","abstract":[{"type":"text","text":"A connection to the YubiKey utilizing the USB-C port and the TKSmartCard implementation from"},{"text":" ","type":"text"},{"type":"text","text":"the CryptoTokenKit framework."}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"SmartCardConnection"}],"kind":"symbol","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"SmartCardConnection"}],"type":"topic"},"doc://YubiKit/documentation/YubiKit/ConnectionHelper":{"kind":"symbol","url":"\/documentation\/yubikit\/connectionhelper","type":"topic","fragments":[{"kind":"keyword","text":"enum"},{"text":" ","kind":"text"},{"text":"ConnectionHelper","kind":"identifier"}],"abstract":[{"type":"text","text":"ConnectionHelper simplifies the creation of different connections to the YubiKey. It can either return"},{"text":" ","type":"text"},{"text":"a connection of any type from a single function or provide a AsyncSequence implementation allowing","type":"text"},{"type":"text","text":" "},{"type":"text","text":"you to use a for loop awaiting YubiKeys to be inserted and removed from a device."}],"navigatorTitle":[{"text":"ConnectionHelper","kind":"identifier"}],"role":"symbol","identifier":"doc:\/\/YubiKit\/documentation\/YubiKit\/ConnectionHelper","title":"ConnectionHelper"},"https://github.com/Yubico/yubikit-swift/raw/main/Samples/oath-sample.zip":{"identifier":"https:\/\/github.com\/Yubico\/yubikit-swift\/raw\/main\/Samples\/oath-sample.zip","type":"download","checksum":null,"url":"https:\/\/github.com\/Yubico\/yubikit-swift\/raw\/main\/Samples\/oath-sample.zip"},"doc://YubiKit/documentation/YubiKit/ManagementSession":{"type":"topic","identifier":"doc:\/\/YubiKit\/documentation\/YubiKit\/ManagementSession","navigatorTitle":[{"kind":"identifier","text":"ManagementSession"}],"role":"symbol","title":"ManagementSession","abstract":[{"text":"An interface to the Management application on the YubiKey.","type":"text"}],"url":"\/documentation\/yubikit\/managementsession","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ManagementSession"}],"kind":"symbol"}}}
{"hierarchy":{"paths":[["doc:\/\/yubikit-swift.YubiKit\/documentation\/YubiKit"]]},"metadata":{"roleHeading":"Sample Code","role":"sampleCode","color":{"standardColorIdentifier":"green"},"title":"OATHSample: Basic OATH app showcasing how to integrate the SDK","modules":[{"name":"YubiKit"}]},"kind":"article","abstract":[{"text":"This sample shows how to build an iOS and macOS app that reads TOTP codes from YubiKeys. The app demonstrates establishing connections, managing connection lifecycle, using ","type":"text"},{"type":"reference","identifier":"doc:\/\/yubikit-swift.YubiKit\/documentation\/YubiKit\/OATHSession","isActive":true},{"text":" to retrieve authentication codes, and ","type":"text"},{"type":"reference","identifier":"doc:\/\/yubikit-swift.YubiKit\/documentation\/YubiKit\/ManagementSession","isActive":true},{"text":" to get device information.","type":"text"}],"primaryContentSections":[{"content":[{"level":2,"text":"Overview","type":"heading","anchor":"overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The sample creates an authenticator app that:"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"Establishes connections to YubiKeys via USB, Lightning, or NFC"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Manages connection lifecycle (detecting plugged\/unplugged devices)"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Lists TOTP codes stored on the YubiKey"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Shows device information like firmware version"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Handles connection errors and user cancellations gracefully"}],"type":"paragraph"}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This sample focuses on read-only operations and doesn’t handle password-protected YubiKeys or credential management."}]},{"level":2,"text":"Connection Management","type":"heading","anchor":"Connection-Management"},{"level":3,"text":"Handling Wired Connections","type":"heading","anchor":"Handling-Wired-Connections"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The app uses a "},{"type":"codeVoice","code":"ConnectionManager"},{"type":"text","text":" to handle persistent connections to plugged-in YubiKeys. This approach ensures your app stays responsive when users plug and unplug their YubiKeys:"}]},{"code":["private func startWiredConnection() {","    wiredConnectionTask = Task { @MainActor in","        while !Task.isCancelled {","            do {","                let newConnection = try await WiredSmartCardConnection.makeConnection()","                wiredConnection = newConnection","","                \/\/ Wait for disconnect","                let closeError = await newConnection.waitUntilClosed()","                wiredConnection = nil","            } catch {","                self.error = error","            }","        }","    }","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The key insight here is using "},{"type":"codeVoice","code":"waitUntilClosed()"},{"type":"text","text":" to detect when the YubiKey is unplugged, then automatically waiting for the next connection."}]},{"level":3,"text":"NFC Connections","type":"heading","anchor":"NFC-Connections"},{"type":"paragraph","inlineContent":[{"type":"text","text":"NFC connections work differently - they’re initiated by user action and are short-lived:"}]},{"code":["func requestNFCConnection() async {","    do {","        nfcConnection = try await NFCSmartCardConnection()","    } catch {","        self.error = error","    }","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"When an NFC connection is established, the app fetches data and immediately closes it with a user message:"}]},{"code":["Task {","    await model.update(using: connection)","    await connection.close(message: \"Codes calculated\")","}"],"type":"codeListing","syntax":"swift"},{"level":2,"text":"Working with YubiKey Data","type":"heading","anchor":"Working-with-YubiKey-Data"},{"level":3,"text":"Reading OATH Codes","type":"heading","anchor":"Reading-OATH-Codes"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Once you have a connection, getting TOTP codes is straightforward:"}]},{"code":["private func calculateCodes(using connection: SmartCardConnection) async {","    do {","        let session = try await OATHSession.makeSession(connection: connection)","        let result = try await session.calculateCredentialCodes()","        accounts = result.map { credential, code in","            Account(","                label: credential.label,","                code: code?.code,","                issuer: credential.issuer,","                type: credential.type","            )","        }","    } catch {","        self.error = error","    }","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"calculateCredentialCodes()"},{"type":"text","text":" method returns a dictionary mapping credentials to their current codes. Some codes might be "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" if they require touch or are password-protected."}]},{"level":3,"text":"Getting Device Information","type":"heading","anchor":"Getting-Device-Information"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Use "},{"type":"codeVoice","code":"ManagementSession"},{"type":"text","text":" to get YubiKey information:"}]},{"code":["private func getKeyVersion(using connection: SmartCardConnection) async {","    do {","        let session = try await ManagementSession.makeSession(connection: connection)","        self.keyVersion = await session.version.description","    } catch {","        self.error = error","    }","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"Model"},{"type":"text","text":" class combines both operations in a single "},{"type":"codeVoice","code":"update"},{"type":"text","text":" method:"}]},{"code":["func update(using connection: SmartCardConnection) async {","    await calculateCodes(using: connection)","    await getKeyVersion(using: connection)","    connectionType = connection.connectionType","}"],"type":"codeListing","syntax":"swift"},{"level":2,"text":"SwiftUI Integration","type":"heading","anchor":"SwiftUI-Integration"},{"level":3,"text":"Reacting to Connection Changes","type":"heading","anchor":"Reacting-to-Connection-Changes"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The app uses SwiftUI’s "},{"type":"codeVoice","code":"@Published"},{"type":"text","text":" properties and "},{"type":"codeVoice","code":"onReceive"},{"type":"text","text":" to update the UI when connections change:"}]},{"code":[".onReceive(connectionManager.$wiredConnection) { newConnection in","    guard let connection = newConnection else {","        model.clear()  \/\/ Clear UI when YubiKey unplugged","        return","    }","    Task { await model.update(using: connection) }","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This pattern ensures the UI immediately updates when YubiKeys are plugged in or removed."}]},{"level":3,"text":"Platform-Specific Features","type":"heading","anchor":"Platform-Specific-Features"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The app handles iOS vs macOS differences with conditional compilation:"}]},{"code":["#if os(iOS)",".refreshable {","    await connectionManager.requestNFCConnection()","}","#endif"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"iOS users can pull-to-refresh to scan with NFC, while macOS users only see USB options."}]},{"level":3,"text":"Connection Type Detection","type":"heading","anchor":"Connection-Type-Detection"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The sample includes a useful extension to identify connection types:"}]},{"code":["extension SmartCardConnection {","    var connectionType: String {","        switch self {","        case _ as NFCSmartCardConnection: return \"NFC\"","        case _ as LightningSmartCardConnection: return \"Lightning\"","        case _ as USBSmartCardConnection: return \"USB\"","        default: return \"Unknown\"","        }","    }","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This is helpful because NFC connections are slower than USB, and users like to know how their YubiKey is connected."}]},{"level":2,"text":"Architecture Decisions","type":"heading","anchor":"Architecture-Decisions"},{"level":3,"text":"Why the connection management works this way","type":"heading","anchor":"Why-the-connection-management-works-this-way"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The sample uses a background loop that continuously waits for wired connections. This might seem unusual, but it solves a key problem: YubiKeys get plugged and unplugged frequently, but apps need to stay responsive."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"When you unplug your YubiKey, the app doesn’t crash or freeze - it detects the disconnection via "},{"type":"codeVoice","code":"waitUntilClosed()"},{"type":"text","text":" and immediately starts waiting for the next YubiKey. This creates a smoother user experience where the app responds when you plug \/ unplug a YubiKey."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"NFC works differently since you can’t continuously scan - the user has to explicitly initiate each scan. That’s why NFC connections are handled separately through user actions like the scan button or pull-to-refresh."}]},{"level":3,"text":"Error handling for hardware connections","type":"heading","anchor":"Error-handling-for-hardware-connections"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Hardware connections are unreliable by nature. Users will unplug devices mid-operation, walk away during NFC scans, or have connectivity issues. The sample handles this gracefully:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Connection failures are caught and stored as errors"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"User cancellations (like dismissing NFC scan) are filtered out to avoid unnecessary error alerts"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Session errors are handled similarly - show the error but maintain app functionality"}]}]}]},{"level":3,"text":"Working with Swift actors","type":"heading","anchor":"Working-with-Swift-actors"},{"type":"paragraph","inlineContent":[{"type":"text","text":"YubiKit sessions are Swift actors that handle their own threading. The sample shows how to integrate this with SwiftUI’s main actor requirements:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"ConnectionManager"},{"type":"text","text":" runs on "},{"type":"codeVoice","code":"@MainActor"},{"type":"text","text":" so it can directly update "},{"type":"codeVoice","code":"@Published"},{"type":"text","text":" properties"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Session calls happen on the session’s actor, then results are passed back to update the UI"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Everything uses "},{"type":"codeVoice","code":"async\/await"}]}]}]}],"kind":"content"}],"sections":[],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/yubikit-swift.YubiKit\/documentation\/YubiKit\/OATHSampleCode"},"seeAlsoSections":[{"anchor":"Sample-code","generated":true,"title":"Sample code","identifiers":["doc:\/\/yubikit-swift.YubiKit\/documentation\/YubiKit\/PIVToolSampleCode"]}],"sampleCodeDownload":{"kind":"sampleDownload","action":{"overridingTitle":"View Source","type":"reference","identifier":"https:\/\/github.com\/Yubico\/yubikit-swift\/tree\/main\/Samples\/OATHSample","isActive":true}},"schemaVersion":{"minor":3,"patch":0,"major":0},"variants":[{"paths":["\/documentation\/yubikit\/oathsamplecode"],"traits":[{"interfaceLanguage":"swift"}]}],"references":{"doc://yubikit-swift.YubiKit/documentation/YubiKit/PIVSession":{"fragments":[{"text":"actor","kind":"keyword"},{"text":" ","kind":"text"},{"text":"PIVSession","kind":"identifier"}],"url":"\/documentation\/yubikit\/pivsession","role":"symbol","title":"PIVSession","type":"topic","abstract":[{"type":"text","text":"An interface to the PIV application on the YubiKey."}],"kind":"symbol","identifier":"doc:\/\/yubikit-swift.YubiKit\/documentation\/YubiKit\/PIVSession","navigatorTitle":[{"text":"PIVSession","kind":"identifier"}]},"doc://yubikit-swift.YubiKit/documentation/YubiKit/OATHSession":{"fragments":[{"text":"actor","kind":"keyword"},{"text":" ","kind":"text"},{"text":"OATHSession","kind":"identifier"}],"url":"\/documentation\/yubikit\/oathsession","role":"symbol","title":"OATHSession","type":"topic","abstract":[{"type":"text","text":"An interface to the OATH application on the YubiKey."}],"kind":"symbol","identifier":"doc:\/\/yubikit-swift.YubiKit\/documentation\/YubiKit\/OATHSession","navigatorTitle":[{"text":"OATHSession","kind":"identifier"}]},"doc://yubikit-swift.YubiKit/documentation/YubiKit/PIVToolSampleCode":{"kind":"article","abstract":[{"type":"text","text":"This sample shows how to build applications that use YubiKeys for PIV (Personal Identity Verification) operations. The command-line tool demonstrates using "},{"type":"reference","isActive":true,"identifier":"doc:\/\/yubikit-swift.YubiKit\/documentation\/YubiKit\/PIVSession"},{"type":"text","text":" for cryptographic operations, certificate management, and access control."}],"identifier":"doc:\/\/yubikit-swift.YubiKit\/documentation\/YubiKit\/PIVToolSampleCode","url":"\/documentation\/yubikit\/pivtoolsamplecode","title":"PIVTool: Building PIV applications with YubiKey","type":"topic","role":"sampleCode"},"doc://yubikit-swift.YubiKit/documentation/YubiKit/ManagementSession":{"title":"ManagementSession","fragments":[{"text":"actor","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ManagementSession","kind":"identifier"}],"url":"\/documentation\/yubikit\/managementsession","identifier":"doc:\/\/yubikit-swift.YubiKit\/documentation\/YubiKit\/ManagementSession","kind":"symbol","navigatorTitle":[{"text":"ManagementSession","kind":"identifier"}],"type":"topic","abstract":[{"type":"text","text":"An interface to the Management application on the YubiKey."}],"role":"symbol"},"https://github.com/Yubico/yubikit-swift/tree/main/Samples/OATHSample":{"type":"download","identifier":"https:\/\/github.com\/Yubico\/yubikit-swift\/tree\/main\/Samples\/OATHSample","checksum":null,"url":"https:\/\/github.com\/Yubico\/yubikit-swift\/tree\/main\/Samples\/OATHSample"},"documentation-header.png":{"type":"image","identifier":"documentation-header.png","variants":[{"traits":["2x","light"],"url":"\/images\/yubikit-swift.YubiKit\/documentation-header@2x.png"},{"traits":["2x","dark"],"url":"\/images\/yubikit-swift.YubiKit\/documentation-header~dark@2x.png"}],"alt":"YubiKeys in a row"},"doc://yubikit-swift.YubiKit/documentation/YubiKit":{"url":"\/documentation\/yubikit","abstract":[{"type":"text","text":"Connect and run commands on the different applications on a YubiKey. The framework support connecting using NFC, Lightning and USB."}],"role":"collection","kind":"symbol","type":"topic","images":[{"type":"icon","identifier":"documentation-header.png"}],"title":"YubiKit","identifier":"doc:\/\/yubikit-swift.YubiKit\/documentation\/YubiKit"}}}
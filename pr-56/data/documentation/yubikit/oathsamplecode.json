{"sampleCodeDownload":{"action":{"type":"reference","identifier":"https:\/\/github.com\/Yubico\/yubikit-swift\/tree\/main\/Samples\/OATHSample","overridingTitle":"View Source","isActive":true},"kind":"sampleDownload"},"abstract":[{"text":"This sample shows how to build an iOS and macOS app that reads TOTP codes from YubiKeys. The app demonstrates establishing connections, managing connection lifecycle, using ","type":"text"},{"type":"reference","identifier":"doc:\/\/YubiKit\/documentation\/YubiKit\/OATHSession","isActive":true},{"text":" to retrieve authentication codes, and ","type":"text"},{"type":"reference","identifier":"doc:\/\/YubiKit\/documentation\/YubiKit\/ManagementSession","isActive":true},{"text":" to get device information.","type":"text"}],"primaryContentSections":[{"kind":"content","content":[{"type":"heading","level":2,"text":"Overview","anchor":"overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The sample creates an authenticator app that:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Establishes connections to YubiKeys via USB, Lightning, or NFC"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Manages connection lifecycle (detecting plugged\/unplugged devices)","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Lists TOTP codes stored on the YubiKey","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Shows device information like firmware version"}]}]},{"content":[{"inlineContent":[{"text":"Handles connection errors and user cancellations gracefully","type":"text"}],"type":"paragraph"}]}]},{"type":"paragraph","inlineContent":[{"text":"This sample focuses on read-only operations and doesn’t handle password-protected YubiKeys or credential management.","type":"text"}]},{"type":"heading","level":2,"text":"Connection Management","anchor":"Connection-Management"},{"type":"heading","level":3,"text":"Handling Wired Connections","anchor":"Handling-Wired-Connections"},{"type":"paragraph","inlineContent":[{"text":"The app uses a ","type":"text"},{"code":"ConnectionManager","type":"codeVoice"},{"text":" to handle persistent connections to plugged-in YubiKeys. This approach ensures your app stays responsive when users plug and unplug their YubiKeys:","type":"text"}]},{"type":"codeListing","code":["private func startWiredConnection() {","    wiredConnectionTask = Task { @MainActor in","        while !Task.isCancelled {","            do {","                let newConnection = try await WiredSmartCardConnection.connection()","                wiredConnection = newConnection","","                \/\/ Wait for disconnection","                let closeError = await newConnection.connectionDidClose()","                wiredConnection = nil","            } catch {","                self.error = error","            }","        }","    }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"The key insight here is using ","type":"text"},{"code":"connectionDidClose()","type":"codeVoice"},{"text":" to detect when the YubiKey is unplugged, then automatically waiting for the next connection.","type":"text"}]},{"type":"heading","level":3,"text":"NFC Connections","anchor":"NFC-Connections"},{"type":"paragraph","inlineContent":[{"type":"text","text":"NFC connections work differently - they’re initiated by user action and are short-lived:"}]},{"type":"codeListing","code":["func requestNFCConnection() async {","    do {","        nfcConnection = try await NFCSmartCardConnection.connection()","    } catch {","        self.error = error","    }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"When an NFC connection is established, the app fetches data and immediately closes it with a user message:","type":"text"}]},{"type":"codeListing","code":["Task {","    await model.update(using: connection)","    await connection.close(message: \"Codes calculated\")","}"],"syntax":"swift"},{"type":"heading","level":2,"text":"Working with YubiKey Data","anchor":"Working-with-YubiKey-Data"},{"type":"heading","level":3,"text":"Reading OATH Codes","anchor":"Reading-OATH-Codes"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Once you have a connection, getting TOTP codes is straightforward:"}]},{"type":"codeListing","code":["private func calculateCodes(using connection: SmartCardConnection) async {","    do {","        let session = try await OATHSession.session(withConnection: connection)","        let result = try await session.calculateCodes()","","        accounts = result.map { credential, code in","            Account(","                label: credential.label,","                code: code?.code,","                issuer: credential.issuer,","                type: credential.type","            )","        }","    } catch {","        self.error = error","    }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"code":"calculateCodes()","type":"codeVoice"},{"text":" method returns a dictionary mapping credentials to their current codes. Some codes might be ","type":"text"},{"code":"nil","type":"codeVoice"},{"text":" if they require touch or are password-protected.","type":"text"}]},{"type":"heading","level":3,"text":"Getting Device Information","anchor":"Getting-Device-Information"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Use "},{"type":"codeVoice","code":"ManagementSession"},{"type":"text","text":" to get YubiKey information:"}]},{"type":"codeListing","code":["private func getKeyVersion(using connection: SmartCardConnection) async {","    do {","        let session = try await ManagementSession.session(withConnection: connection)","        self.keyVersion = session.version.description","    } catch {","        self.error = error","    }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"Model"},{"type":"text","text":" class combines both operations in a single "},{"type":"codeVoice","code":"update"},{"type":"text","text":" method:"}]},{"type":"codeListing","code":["func update(using connection: SmartCardConnection) async {","    await calculateCodes(using: connection)","    await getKeyVersion(using: connection)","    connectionType = connection.connectionType","}"],"syntax":"swift"},{"type":"heading","level":2,"text":"SwiftUI Integration","anchor":"SwiftUI-Integration"},{"type":"heading","level":3,"text":"Reacting to Connection Changes","anchor":"Reacting-to-Connection-Changes"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The app uses SwiftUI’s "},{"type":"codeVoice","code":"@Published"},{"type":"text","text":" properties and "},{"type":"codeVoice","code":"onReceive"},{"type":"text","text":" to update the UI when connections change:"}]},{"type":"codeListing","code":[".onReceive(connectionManager.$wiredConnection) { newConnection in","    guard let connection = newConnection else {","        model.clear()  \/\/ Clear UI when YubiKey unplugged","        return","    }","    Task { await model.update(using: connection) }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This pattern ensures the UI immediately updates when YubiKeys are plugged in or removed."}]},{"type":"heading","level":3,"text":"Platform-Specific Features","anchor":"Platform-Specific-Features"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The app handles iOS vs macOS differences with conditional compilation:"}]},{"type":"codeListing","code":["#if os(iOS)",".refreshable {","    await connectionManager.requestNFCConnection()","}","#endif"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"iOS users can pull-to-refresh to scan with NFC, while macOS users only see USB options."}]},{"type":"heading","level":3,"text":"Error Handling in SwiftUI","anchor":"Error-Handling-in-SwiftUI"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The sample shows how to handle different types of connection errors:"}]},{"type":"codeListing","code":[".onReceive(connectionManager.$error) { error in","    switch error {","    case .some(ConnectionError.cancelledByUser):","        return  \/\/ Don't show error for user cancellation","    default:","        model.error = error","    }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This prevents showing errors when users intentionally cancel NFC scans."}]},{"type":"heading","level":3,"text":"Connection Type Detection","anchor":"Connection-Type-Detection"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The sample includes a useful extension to identify connection types:"}]},{"type":"codeListing","code":["extension SmartCardConnection {","    var connectionType: String {","        switch self {","        case _ as NFCSmartCardConnection: return \"NFC\"","        case _ as LightningSmartCardConnection: return \"Lightning\"","        case _ as USBSmartCardConnection: return \"USB\"","        default: return \"Unknown\"","        }","    }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This is helpful because NFC connections are slower than USB, and users like to know how their YubiKey is connected."}]},{"type":"heading","level":2,"text":"Architecture Decisions","anchor":"Architecture-Decisions"},{"type":"heading","level":3,"text":"Why the connection management works this way","anchor":"Why-the-connection-management-works-this-way"},{"type":"paragraph","inlineContent":[{"text":"The sample uses a background loop that continuously waits for wired connections. This might seem unusual, but it solves a key problem: YubiKeys get plugged and unplugged frequently, but apps need to stay responsive.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"When you unplug your YubiKey, the app doesn’t crash or freeze - it detects the disconnection via "},{"code":"connectionDidClose()","type":"codeVoice"},{"type":"text","text":" and immediately starts waiting for the next YubiKey. This creates a smoother user experience where the app responds when you plug \/ unplug a YubiKey."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"NFC works differently since you can’t continuously scan - the user has to explicitly initiate each scan. That’s why NFC connections are handled separately through user actions like the scan button or pull-to-refresh."}]},{"type":"heading","level":3,"text":"Error handling for hardware connections","anchor":"Error-handling-for-hardware-connections"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Hardware connections are unreliable by nature. Users will unplug devices mid-operation, walk away during NFC scans, or have connectivity issues. The sample handles this gracefully:"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"Connection failures are caught and stored as errors"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"User cancellations (like dismissing NFC scan) are filtered out to avoid unnecessary error alerts"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Session errors are handled similarly - show the error but maintain app functionality"}],"type":"paragraph"}]}]},{"type":"heading","level":3,"text":"Working with Swift actors","anchor":"Working-with-Swift-actors"},{"type":"paragraph","inlineContent":[{"type":"text","text":"YubiKit sessions are Swift actors that handle their own threading. The sample shows how to integrate this with SwiftUI’s main actor requirements:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"ConnectionManager"},{"type":"text","text":" runs on "},{"type":"codeVoice","code":"@MainActor"},{"type":"text","text":" so it can directly update "},{"type":"codeVoice","code":"@Published"},{"type":"text","text":" properties"}]}]},{"content":[{"inlineContent":[{"text":"Session calls happen on the session’s actor, then results are passed back to update the UI","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Everything uses "},{"code":"async\/await","type":"codeVoice"}]}]}]}]}],"schemaVersion":{"patch":0,"minor":3,"major":0},"kind":"article","variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/yubikit\/oathsamplecode"]}],"seeAlsoSections":[{"generated":true,"anchor":"Sample-code","title":"Sample code","identifiers":["doc:\/\/YubiKit\/documentation\/YubiKit\/PIVToolSampleCode"]}],"sections":[],"identifier":{"url":"doc:\/\/YubiKit\/documentation\/YubiKit\/OATHSampleCode","interfaceLanguage":"swift"},"metadata":{"role":"sampleCode","title":"OATHSample: Basic OATH app showcasing how to integrate the SDK","roleHeading":"Sample Code","modules":[{"name":"YubiKit"}],"color":{"standardColorIdentifier":"green"}},"hierarchy":{"paths":[["doc:\/\/YubiKit\/documentation\/YubiKit"]]},"references":{"doc://YubiKit/documentation/YubiKit/PIVToolSampleCode":{"abstract":[{"text":"This sample shows how to build applications that use YubiKeys for PIV (Personal Identity Verification) operations. The command-line tool demonstrates using ","type":"text"},{"isActive":true,"identifier":"doc:\/\/YubiKit\/documentation\/YubiKit\/PIVSession","type":"reference"},{"text":" for cryptographic operations, certificate management, and access control.","type":"text"}],"identifier":"doc:\/\/YubiKit\/documentation\/YubiKit\/PIVToolSampleCode","kind":"article","title":"PIVTool: Building PIV applications with YubiKey","url":"\/documentation\/yubikit\/pivtoolsamplecode","role":"sampleCode","type":"topic"},"doc://YubiKit/documentation/YubiKit/PIVSession":{"type":"topic","fragments":[{"text":"actor","kind":"keyword"},{"text":" ","kind":"text"},{"text":"PIVSession","kind":"identifier"}],"kind":"symbol","url":"\/documentation\/yubikit\/pivsession","identifier":"doc:\/\/YubiKit\/documentation\/YubiKit\/PIVSession","abstract":[{"type":"text","text":"An interface to the PIV application on the YubiKey."}],"role":"symbol","navigatorTitle":[{"text":"PIVSession","kind":"identifier"}],"title":"PIVSession"},"doc://YubiKit/documentation/YubiKit/OATHSession":{"type":"topic","fragments":[{"text":"actor","kind":"keyword"},{"text":" ","kind":"text"},{"text":"OATHSession","kind":"identifier"}],"kind":"symbol","abstract":[{"type":"text","text":"An interface to the OATH application on the YubiKey."}],"url":"\/documentation\/yubikit\/oathsession","title":"OATHSession","navigatorTitle":[{"text":"OATHSession","kind":"identifier"}],"role":"symbol","identifier":"doc:\/\/YubiKit\/documentation\/YubiKit\/OATHSession"},"documentation-header.png":{"type":"image","identifier":"documentation-header.png","alt":"YubiKeys in a row","variants":[{"url":"\/images\/YubiKit\/documentation-header@2x.png","traits":["2x","light"]},{"url":"\/images\/YubiKit\/documentation-header~dark@2x.png","traits":["2x","dark"]}]},"https://github.com/Yubico/yubikit-swift/tree/main/Samples/OATHSample":{"checksum":null,"url":"https:\/\/github.com\/Yubico\/yubikit-swift\/tree\/main\/Samples\/OATHSample","identifier":"https:\/\/github.com\/Yubico\/yubikit-swift\/tree\/main\/Samples\/OATHSample","type":"download"},"doc://YubiKit/documentation/YubiKit/ManagementSession":{"role":"symbol","identifier":"doc:\/\/YubiKit\/documentation\/YubiKit\/ManagementSession","kind":"symbol","title":"ManagementSession","type":"topic","fragments":[{"text":"actor","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ManagementSession","kind":"identifier"}],"navigatorTitle":[{"text":"ManagementSession","kind":"identifier"}],"abstract":[{"text":"An interface to the Management application on the YubiKey.","type":"text"}],"url":"\/documentation\/yubikit\/managementsession"},"doc://YubiKit/documentation/YubiKit":{"images":[{"type":"icon","identifier":"documentation-header.png"}],"type":"topic","role":"collection","kind":"symbol","url":"\/documentation\/yubikit","abstract":[{"text":"Connect and run commands on the different applications on a YubiKey. The framework support connecting using NFC, Lightning and USB-C.","type":"text"}],"identifier":"doc:\/\/YubiKit\/documentation\/YubiKit","title":"YubiKit"}}}
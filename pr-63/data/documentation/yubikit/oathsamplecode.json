{"kind":"article","metadata":{"roleHeading":"Sample Code","role":"sampleCode","modules":[{"name":"YubiKit"}],"title":"OATHSample: Basic OATH app showcasing how to integrate the SDK","color":{"standardColorIdentifier":"green"}},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/yubikit\/oathsamplecode"]}],"sampleCodeDownload":{"kind":"sampleDownload","action":{"identifier":"https:\/\/github.com\/Yubico\/yubikit-swift\/tree\/main\/Samples\/OATHSample","isActive":true,"type":"reference","overridingTitle":"View Source"}},"abstract":[{"type":"text","text":"This sample shows how to build an iOS and macOS app that reads TOTP codes from YubiKeys. The app demonstrates establishing connections, managing connection lifecycle, using "},{"identifier":"doc:\/\/yubikit-swift.YubiKit\/documentation\/YubiKit\/OATHSession","isActive":true,"type":"reference"},{"type":"text","text":" to retrieve authentication codes, and "},{"identifier":"doc:\/\/yubikit-swift.YubiKit\/documentation\/YubiKit\/ManagementSession","isActive":true,"type":"reference"},{"type":"text","text":" to get device information."}],"primaryContentSections":[{"kind":"content","content":[{"anchor":"overview","type":"heading","text":"Overview","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"The sample creates an authenticator app that:"}]},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"Establishes connections to YubiKeys via USB, Lightning, or NFC"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Manages connection lifecycle (detecting plugged\/unplugged devices)"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Lists TOTP codes stored on the YubiKey"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Shows device information like firmware version"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Handles connection errors and user cancellations gracefully"}]}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This sample focuses on read-only operations and doesn’t handle password-protected YubiKeys or credential management."}]},{"anchor":"Connection-Management","type":"heading","text":"Connection Management","level":2},{"type":"heading","level":3,"text":"Handling Wired Connections","anchor":"Handling-Wired-Connections"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The app uses a "},{"type":"codeVoice","code":"ConnectionManager"},{"type":"text","text":" to handle persistent connections to plugged-in YubiKeys. This approach ensures your app stays responsive when users plug and unplug their YubiKeys:"}]},{"syntax":"swift","type":"codeListing","code":["private func startWiredConnection() {","    wiredConnectionTask = Task { @MainActor in","        while !Task.isCancelled {","            do {","                let newConnection = try await WiredSmartCardConnection.makeConnection()","                wiredConnection = newConnection","","                \/\/ Wait for disconnect","                let closeError = await newConnection.waitUntilClosed()","                wiredConnection = nil","            } catch {","                self.error = error","            }","        }","    }","}"]},{"type":"paragraph","inlineContent":[{"text":"The key insight here is using ","type":"text"},{"type":"codeVoice","code":"waitUntilClosed()"},{"text":" to detect when the YubiKey is unplugged, then automatically waiting for the next connection.","type":"text"}]},{"type":"heading","level":3,"text":"NFC Connections","anchor":"NFC-Connections"},{"type":"paragraph","inlineContent":[{"type":"text","text":"NFC connections work differently - they’re initiated by user action and are short-lived:"}]},{"syntax":"swift","type":"codeListing","code":["func requestNFCConnection() async {","    do {","        nfcConnection = try await NFCSmartCardConnection()","    } catch {","        self.error = error","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"When an NFC connection is established, the app fetches data and immediately closes it with a user message:"}]},{"syntax":"swift","type":"codeListing","code":["Task {","    await model.update(using: connection)","    await connection.close(message: \"Codes calculated\")","}"]},{"type":"heading","level":2,"text":"Working with YubiKey Data","anchor":"Working-with-YubiKey-Data"},{"type":"heading","level":3,"text":"Reading OATH Codes","anchor":"Reading-OATH-Codes"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Once you have a connection, getting TOTP codes is straightforward:"}]},{"syntax":"swift","type":"codeListing","code":["private func calculateCodes(using connection: SmartCardConnection) async {","    do {","        let session = try await OATHSession.makeSession(connection: connection)","        let result = try await session.calculateCredentialCodes()","        accounts = result.map { credential, code in","            Account(","                label: credential.label,","                code: code?.code,","                issuer: credential.issuer,","                type: credential.type","            )","        }","    } catch {","        self.error = error","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"calculateCredentialCodes()"},{"type":"text","text":" method returns a dictionary mapping credentials to their current codes. Some codes might be "},{"code":"nil","type":"codeVoice"},{"type":"text","text":" if they require touch or are password-protected."}]},{"type":"heading","level":3,"text":"Getting Device Information","anchor":"Getting-Device-Information"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Use "},{"type":"codeVoice","code":"ManagementSession"},{"text":" to get YubiKey information:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["private func getKeyVersion(using connection: SmartCardConnection) async {","    do {","        let session = try await ManagementSession.makeSession(connection: connection)","        self.keyVersion = await session.version.description","    } catch {","        self.error = error","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"Model"},{"type":"text","text":" class combines both operations in a single "},{"type":"codeVoice","code":"update"},{"type":"text","text":" method:"}]},{"type":"codeListing","code":["func update(using connection: SmartCardConnection) async {","    await calculateCodes(using: connection)","    await getKeyVersion(using: connection)","    connectionType = connection.connectionType","}"],"syntax":"swift"},{"type":"heading","anchor":"SwiftUI-Integration","level":2,"text":"SwiftUI Integration"},{"text":"Reacting to Connection Changes","anchor":"Reacting-to-Connection-Changes","type":"heading","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"The app uses SwiftUI’s "},{"type":"codeVoice","code":"@Published"},{"type":"text","text":" properties and "},{"type":"codeVoice","code":"onReceive"},{"type":"text","text":" to update the UI when connections change:"}]},{"type":"codeListing","code":[".onReceive(connectionManager.$wiredConnection) { newConnection in","    guard let connection = newConnection else {","        model.clear()  \/\/ Clear UI when YubiKey unplugged","        return","    }","    Task { await model.update(using: connection) }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This pattern ensures the UI immediately updates when YubiKeys are plugged in or removed."}]},{"type":"heading","text":"Platform-Specific Features","level":3,"anchor":"Platform-Specific-Features"},{"type":"paragraph","inlineContent":[{"text":"The app handles iOS vs macOS differences with conditional compilation:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["#if os(iOS)",".refreshable {","    await connectionManager.requestNFCConnection()","}","#endif"]},{"type":"paragraph","inlineContent":[{"text":"iOS users can pull-to-refresh to scan with NFC, while macOS users only see USB options.","type":"text"}]},{"type":"heading","text":"Connection Type Detection","level":3,"anchor":"Connection-Type-Detection"},{"inlineContent":[{"type":"text","text":"The sample includes a useful extension to identify connection types:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["extension SmartCardConnection {","    var connectionType: String {","        switch self {","        case _ as NFCSmartCardConnection: return \"NFC\"","        case _ as LightningSmartCardConnection: return \"Lightning\"","        case _ as USBSmartCardConnection: return \"USB\"","        default: return \"Unknown\"","        }","    }","}"]},{"inlineContent":[{"type":"text","text":"This is helpful because NFC connections are slower than USB, and users like to know how their YubiKey is connected."}],"type":"paragraph"},{"type":"heading","level":2,"text":"Architecture Decisions","anchor":"Architecture-Decisions"},{"type":"heading","level":3,"text":"Why the connection management works this way","anchor":"Why-the-connection-management-works-this-way"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The sample uses a background loop that continuously waits for wired connections. This might seem unusual, but it solves a key problem: YubiKeys get plugged and unplugged frequently, but apps need to stay responsive."}]},{"type":"paragraph","inlineContent":[{"text":"When you unplug your YubiKey, the app doesn’t crash or freeze - it detects the disconnection via ","type":"text"},{"code":"waitUntilClosed()","type":"codeVoice"},{"text":" and immediately starts waiting for the next YubiKey. This creates a smoother user experience where the app responds when you plug \/ unplug a YubiKey.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"NFC works differently since you can’t continuously scan - the user has to explicitly initiate each scan. That’s why NFC connections are handled separately through user actions like the scan button or pull-to-refresh."}]},{"type":"heading","text":"Error handling for hardware connections","level":3,"anchor":"Error-handling-for-hardware-connections"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Hardware connections are unreliable by nature. Users will unplug devices mid-operation, walk away during NFC scans, or have connectivity issues. The sample handles this gracefully:"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Connection failures are caught and stored as errors","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"User cancellations (like dismissing NFC scan) are filtered out to avoid unnecessary error alerts"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Session errors are handled similarly - show the error but maintain app functionality"}],"type":"paragraph"}]}],"type":"unorderedList"},{"type":"heading","text":"Working with Swift actors","level":3,"anchor":"Working-with-Swift-actors"},{"type":"paragraph","inlineContent":[{"type":"text","text":"YubiKit sessions are Swift actors that handle their own threading. The sample shows how to integrate this with SwiftUI’s main actor requirements:"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"code":"ConnectionManager","type":"codeVoice"},{"type":"text","text":" runs on "},{"code":"@MainActor","type":"codeVoice"},{"type":"text","text":" so it can directly update "},{"type":"codeVoice","code":"@Published"},{"type":"text","text":" properties"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Session calls happen on the session’s actor, then results are passed back to update the UI"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Everything uses "},{"type":"codeVoice","code":"async\/await"}],"type":"paragraph"}]}],"type":"unorderedList"}]}],"identifier":{"url":"doc:\/\/yubikit-swift.YubiKit\/documentation\/YubiKit\/OATHSampleCode","interfaceLanguage":"swift"},"hierarchy":{"paths":[["doc:\/\/yubikit-swift.YubiKit\/documentation\/YubiKit"]]},"seeAlsoSections":[{"generated":true,"anchor":"Sample-code","title":"Sample code","identifiers":["doc:\/\/yubikit-swift.YubiKit\/documentation\/YubiKit\/PIVToolSampleCode"]}],"sections":[],"schemaVersion":{"patch":0,"minor":3,"major":0},"references":{"doc://yubikit-swift.YubiKit/documentation/YubiKit/PIVToolSampleCode":{"type":"topic","identifier":"doc:\/\/yubikit-swift.YubiKit\/documentation\/YubiKit\/PIVToolSampleCode","kind":"article","role":"sampleCode","title":"PIVTool: Building PIV applications with YubiKey","abstract":[{"type":"text","text":"This sample shows how to build applications that use YubiKeys for PIV (Personal Identity Verification) operations. The command-line tool demonstrates using "},{"identifier":"doc:\/\/yubikit-swift.YubiKit\/documentation\/YubiKit\/PIVSession","isActive":true,"type":"reference"},{"type":"text","text":" for cryptographic operations, certificate management, and access control."}],"url":"\/documentation\/yubikit\/pivtoolsamplecode"},"doc://yubikit-swift.YubiKit/documentation/YubiKit":{"url":"\/documentation\/yubikit","abstract":[{"type":"text","text":"Connect and run commands on the different applications on a YubiKey. The framework support connecting using NFC, Lightning and USB."}],"kind":"symbol","images":[{"type":"icon","identifier":"documentation-header.png"}],"type":"topic","identifier":"doc:\/\/yubikit-swift.YubiKit\/documentation\/YubiKit","title":"YubiKit","role":"collection"},"doc://yubikit-swift.YubiKit/documentation/YubiKit/PIVSession":{"abstract":[{"text":"An interface to the PIV application on the YubiKey.","type":"text"}],"url":"\/documentation\/yubikit\/pivsession","kind":"symbol","identifier":"doc:\/\/yubikit-swift.YubiKit\/documentation\/YubiKit\/PIVSession","type":"topic","title":"PIVSession","role":"symbol","fragments":[{"text":"actor","kind":"keyword"},{"text":" ","kind":"text"},{"text":"PIVSession","kind":"identifier"}],"navigatorTitle":[{"text":"PIVSession","kind":"identifier"}]},"documentation-header.png":{"type":"image","identifier":"documentation-header.png","alt":"YubiKeys in a row","variants":[{"url":"\/images\/yubikit-swift.YubiKit\/documentation-header@2x.png","traits":["2x","light"]},{"url":"\/images\/yubikit-swift.YubiKit\/documentation-header~dark@2x.png","traits":["2x","dark"]}]},"doc://yubikit-swift.YubiKit/documentation/YubiKit/ManagementSession":{"navigatorTitle":[{"kind":"identifier","text":"ManagementSession"}],"type":"topic","identifier":"doc:\/\/yubikit-swift.YubiKit\/documentation\/YubiKit\/ManagementSession","kind":"symbol","role":"symbol","abstract":[{"type":"text","text":"An interface to the Management application on the YubiKey."}],"title":"ManagementSession","fragments":[{"text":"actor","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ManagementSession","kind":"identifier"}],"url":"\/documentation\/yubikit\/managementsession"},"https://github.com/Yubico/yubikit-swift/tree/main/Samples/OATHSample":{"type":"download","identifier":"https:\/\/github.com\/Yubico\/yubikit-swift\/tree\/main\/Samples\/OATHSample","url":"https:\/\/github.com\/Yubico\/yubikit-swift\/tree\/main\/Samples\/OATHSample","checksum":null},"doc://yubikit-swift.YubiKit/documentation/YubiKit/OATHSession":{"title":"OATHSession","type":"topic","fragments":[{"text":"actor","kind":"keyword"},{"text":" ","kind":"text"},{"text":"OATHSession","kind":"identifier"}],"role":"symbol","identifier":"doc:\/\/yubikit-swift.YubiKit\/documentation\/YubiKit\/OATHSession","url":"\/documentation\/yubikit\/oathsession","kind":"symbol","abstract":[{"type":"text","text":"An interface to the OATH application on the YubiKey."}],"navigatorTitle":[{"text":"OATHSession","kind":"identifier"}]}}}
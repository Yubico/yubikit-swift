{"identifier":{"url":"doc:\/\/yubikit-swift.YubiKit\/documentation\/YubiKit\/OATHSampleCode","interfaceLanguage":"swift"},"metadata":{"color":{"standardColorIdentifier":"green"},"roleHeading":"Sample Code","title":"OATHSample: Basic OATH app showcasing how to integrate the SDK","modules":[{"name":"YubiKit"}],"role":"sampleCode"},"primaryContentSections":[{"content":[{"type":"heading","text":"Overview","level":2,"anchor":"overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The sample creates an authenticator app that:"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"Establishes connections to YubiKeys via USB, Lightning, or NFC","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Manages connection lifecycle (detecting plugged\/unplugged devices)","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Lists TOTP codes stored on the YubiKey","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Shows device information like firmware version","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Handles connection errors and user cancellations gracefully","type":"text"}],"type":"paragraph"}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This sample focuses on read-only operations and doesn’t handle password-protected YubiKeys or credential management."}]},{"type":"heading","text":"Connection Management","level":2,"anchor":"Connection-Management"},{"type":"heading","text":"Handling Wired Connections","level":3,"anchor":"Handling-Wired-Connections"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The app uses a "},{"code":"ConnectionManager","type":"codeVoice"},{"type":"text","text":" to handle persistent connections to plugged-in YubiKeys. This approach ensures your app stays responsive when users plug and unplug their YubiKeys:"}]},{"type":"codeListing","code":["private func startWiredConnection() {","    wiredConnectionTask = Task { @MainActor in","        while !Task.isCancelled {","            do {","                let newConnection = try await WiredSmartCardConnection.makeConnection()","                wiredConnection = newConnection","","                \/\/ Wait for disconnect","                let closeError = await newConnection.waitUntilClosed()","                wiredConnection = nil","            } catch {","                self.error = error","            }","        }","    }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The key insight here is using "},{"code":"waitUntilClosed()","type":"codeVoice"},{"type":"text","text":" to detect when the YubiKey is unplugged, then automatically waiting for the next connection."}]},{"type":"heading","text":"NFC Connections","level":3,"anchor":"NFC-Connections"},{"type":"paragraph","inlineContent":[{"type":"text","text":"NFC connections work differently - they’re initiated by user action and are short-lived:"}]},{"type":"codeListing","code":["func requestNFCConnection() async {","    do {","        nfcConnection = try await NFCSmartCardConnection()","    } catch {","        self.error = error","    }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"When an NFC connection is established, the app fetches data and immediately closes it with a user message:"}]},{"type":"codeListing","code":["Task {","    await model.update(using: connection)","    await connection.close(message: \"Codes calculated\")","}"],"syntax":"swift"},{"type":"heading","text":"Working with YubiKey Data","level":2,"anchor":"Working-with-YubiKey-Data"},{"type":"heading","text":"Reading OATH Codes","level":3,"anchor":"Reading-OATH-Codes"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Once you have a connection, getting TOTP codes is straightforward:"}]},{"type":"codeListing","code":["private func calculateCodes(using connection: SmartCardConnection) async {","    do {","        let session = try await OATHSession.makeSession(connection: connection)","        let result = try await session.calculateCredentialCodes()","        accounts = result.map { credential, code in","            Account(","                label: credential.label,","                code: code?.code,","                issuer: credential.issuer,","                type: credential.type","            )","        }","    } catch {","        self.error = error","    }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"code":"calculateCredentialCodes()","type":"codeVoice"},{"type":"text","text":" method returns a dictionary mapping credentials to their current codes. Some codes might be "},{"code":"nil","type":"codeVoice"},{"type":"text","text":" if they require touch or are password-protected."}]},{"type":"heading","text":"Getting Device Information","level":3,"anchor":"Getting-Device-Information"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Use "},{"code":"ManagementSession","type":"codeVoice"},{"type":"text","text":" to get YubiKey information:"}]},{"type":"codeListing","code":["private func getKeyVersion(using connection: SmartCardConnection) async {","    do {","        let session = try await ManagementSession.makeSession(connection: connection)","        self.keyVersion = await session.version.description","    } catch {","        self.error = error","    }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"code":"Model","type":"codeVoice"},{"type":"text","text":" class combines both operations in a single "},{"code":"update","type":"codeVoice"},{"type":"text","text":" method:"}]},{"type":"codeListing","code":["func update(using connection: SmartCardConnection) async {","    await calculateCodes(using: connection)","    await getKeyVersion(using: connection)","    connectionType = connection.connectionType","}"],"syntax":"swift"},{"type":"heading","text":"SwiftUI Integration","level":2,"anchor":"SwiftUI-Integration"},{"type":"heading","text":"Reacting to Connection Changes","level":3,"anchor":"Reacting-to-Connection-Changes"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The app uses SwiftUI’s "},{"code":"@Published","type":"codeVoice"},{"type":"text","text":" properties and "},{"code":"onReceive","type":"codeVoice"},{"type":"text","text":" to update the UI when connections change:"}]},{"type":"codeListing","code":[".onReceive(connectionManager.$wiredConnection) { newConnection in","    guard let connection = newConnection else {","        model.clear()  \/\/ Clear UI when YubiKey unplugged","        return","    }","    Task { await model.update(using: connection) }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This pattern ensures the UI immediately updates when YubiKeys are plugged in or removed."}]},{"type":"heading","text":"Platform-Specific Features","level":3,"anchor":"Platform-Specific-Features"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The app handles iOS vs macOS differences with conditional compilation:"}]},{"type":"codeListing","code":["#if os(iOS)",".refreshable {","    await connectionManager.requestNFCConnection()","}","#endif"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"iOS users can pull-to-refresh to scan with NFC, while macOS users only see USB options."}]},{"type":"heading","text":"Connection Type Detection","level":3,"anchor":"Connection-Type-Detection"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The sample includes a useful extension to identify connection types:"}]},{"code":["extension SmartCardConnection {","    var connectionType: String {","        switch self {","        case _ as NFCSmartCardConnection: return \"NFC\"","        case _ as LightningSmartCardConnection: return \"Lightning\"","        case _ as USBSmartCardConnection: return \"USB\"","        default: return \"Unknown\"","        }","    }","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"This is helpful because NFC connections are slower than USB, and users like to know how their YubiKey is connected.","type":"text"}]},{"anchor":"Architecture-Decisions","type":"heading","level":2,"text":"Architecture Decisions"},{"anchor":"Why-the-connection-management-works-this-way","text":"Why the connection management works this way","type":"heading","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"The sample uses a background loop that continuously waits for wired connections. This might seem unusual, but it solves a key problem: YubiKeys get plugged and unplugged frequently, but apps need to stay responsive."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"When you unplug your YubiKey, the app doesn’t crash or freeze - it detects the disconnection via "},{"code":"waitUntilClosed()","type":"codeVoice"},{"type":"text","text":" and immediately starts waiting for the next YubiKey. This creates a smoother user experience where the app responds when you plug \/ unplug a YubiKey."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"NFC works differently since you can’t continuously scan - the user has to explicitly initiate each scan. That’s why NFC connections are handled separately through user actions like the scan button or pull-to-refresh."}]},{"level":3,"anchor":"Error-handling-for-hardware-connections","text":"Error handling for hardware connections","type":"heading"},{"inlineContent":[{"type":"text","text":"Hardware connections are unreliable by nature. Users will unplug devices mid-operation, walk away during NFC scans, or have connectivity issues. The sample handles this gracefully:"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Connection failures are caught and stored as errors"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"User cancellations (like dismissing NFC scan) are filtered out to avoid unnecessary error alerts"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Session errors are handled similarly - show the error but maintain app functionality"}]}]}],"type":"unorderedList"},{"level":3,"anchor":"Working-with-Swift-actors","text":"Working with Swift actors","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"YubiKit sessions are Swift actors that handle their own threading. The sample shows how to integrate this with SwiftUI’s main actor requirements:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"ConnectionManager"},{"type":"text","text":" runs on "},{"type":"codeVoice","code":"@MainActor"},{"type":"text","text":" so it can directly update "},{"type":"codeVoice","code":"@Published"},{"type":"text","text":" properties"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Session calls happen on the session’s actor, then results are passed back to update the UI"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Everything uses ","type":"text"},{"type":"codeVoice","code":"async\/await"}]}]}]}],"kind":"content"}],"seeAlsoSections":[{"anchor":"Sample-code","title":"Sample code","generated":true,"identifiers":["doc:\/\/yubikit-swift.YubiKit\/documentation\/YubiKit\/PIVToolSampleCode"]}],"sampleCodeDownload":{"action":{"type":"reference","identifier":"https:\/\/github.com\/Yubico\/yubikit-swift\/tree\/main\/Samples\/OATHSample","isActive":true,"overridingTitle":"View Source"},"kind":"sampleDownload"},"hierarchy":{"paths":[["doc:\/\/yubikit-swift.YubiKit\/documentation\/YubiKit"]]},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/yubikit\/oathsamplecode"]}],"abstract":[{"type":"text","text":"This sample shows how to build an iOS and macOS app that reads TOTP codes from YubiKeys. The app demonstrates establishing connections, managing connection lifecycle, using "},{"type":"reference","isActive":true,"identifier":"doc:\/\/yubikit-swift.YubiKit\/documentation\/YubiKit\/OATHSession"},{"type":"text","text":" to retrieve authentication codes, and "},{"type":"reference","isActive":true,"identifier":"doc:\/\/yubikit-swift.YubiKit\/documentation\/YubiKit\/ManagementSession"},{"type":"text","text":" to get device information."}],"kind":"article","schemaVersion":{"major":0,"patch":0,"minor":3},"sections":[],"references":{"doc://yubikit-swift.YubiKit/documentation/YubiKit":{"abstract":[{"type":"text","text":"Connect and run commands on the different applications on a YubiKey. The framework support connecting using NFC, Lightning and USB."}],"kind":"symbol","identifier":"doc:\/\/yubikit-swift.YubiKit\/documentation\/YubiKit","role":"collection","images":[{"type":"icon","identifier":"documentation-header.png"}],"url":"\/documentation\/yubikit","type":"topic","title":"YubiKit"},"doc://yubikit-swift.YubiKit/documentation/YubiKit/ManagementSession":{"abstract":[{"text":"An interface to the Management application on the YubiKey.","type":"text"}],"kind":"symbol","identifier":"doc:\/\/yubikit-swift.YubiKit\/documentation\/YubiKit\/ManagementSession","role":"symbol","url":"\/documentation\/yubikit\/managementsession","fragments":[{"text":"actor","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ManagementSession","kind":"identifier"}],"type":"topic","title":"ManagementSession","navigatorTitle":[{"text":"ManagementSession","kind":"identifier"}]},"https://github.com/Yubico/yubikit-swift/tree/main/Samples/OATHSample":{"checksum":null,"identifier":"https:\/\/github.com\/Yubico\/yubikit-swift\/tree\/main\/Samples\/OATHSample","type":"download","url":"https:\/\/github.com\/Yubico\/yubikit-swift\/tree\/main\/Samples\/OATHSample"},"doc://yubikit-swift.YubiKit/documentation/YubiKit/PIVToolSampleCode":{"kind":"article","abstract":[{"type":"text","text":"This sample shows how to build applications that use YubiKeys for PIV (Personal Identity Verification) operations. The command-line tool demonstrates using "},{"identifier":"doc:\/\/yubikit-swift.YubiKit\/documentation\/YubiKit\/PIVSession","isActive":true,"type":"reference"},{"type":"text","text":" for cryptographic operations, certificate management, and access control."}],"title":"PIVTool: Building PIV applications with YubiKey","identifier":"doc:\/\/yubikit-swift.YubiKit\/documentation\/YubiKit\/PIVToolSampleCode","url":"\/documentation\/yubikit\/pivtoolsamplecode","role":"sampleCode","type":"topic"},"doc://yubikit-swift.YubiKit/documentation/YubiKit/OATHSession":{"fragments":[{"text":"actor","kind":"keyword"},{"text":" ","kind":"text"},{"text":"OATHSession","kind":"identifier"}],"navigatorTitle":[{"text":"OATHSession","kind":"identifier"}],"abstract":[{"text":"An interface to the OATH application on the YubiKey.","type":"text"}],"kind":"symbol","role":"symbol","title":"OATHSession","type":"topic","identifier":"doc:\/\/yubikit-swift.YubiKit\/documentation\/YubiKit\/OATHSession","url":"\/documentation\/yubikit\/oathsession"},"doc://yubikit-swift.YubiKit/documentation/YubiKit/PIVSession":{"abstract":[{"text":"An interface to the PIV application on the YubiKey.","type":"text"}],"kind":"symbol","identifier":"doc:\/\/yubikit-swift.YubiKit\/documentation\/YubiKit\/PIVSession","role":"symbol","url":"\/documentation\/yubikit\/pivsession","fragments":[{"text":"actor","kind":"keyword"},{"text":" ","kind":"text"},{"text":"PIVSession","kind":"identifier"}],"type":"topic","title":"PIVSession","navigatorTitle":[{"text":"PIVSession","kind":"identifier"}]},"documentation-header.png":{"variants":[{"traits":["2x","light"],"url":"\/images\/yubikit-swift.YubiKit\/documentation-header@2x.png"},{"traits":["2x","dark"],"url":"\/images\/yubikit-swift.YubiKit\/documentation-header~dark@2x.png"}],"alt":"YubiKeys in a row","type":"image","identifier":"documentation-header.png"}}}
{"seeAlsoSections":[{"generated":true,"anchor":"Sample-code","identifiers":["doc:\/\/yubikit-swift.YubiKit\/documentation\/YubiKit\/OATHSampleCode"],"title":"Sample code"}],"metadata":{"title":"PIVTool: Building PIV applications with YubiKey","modules":[{"name":"YubiKit"}],"role":"sampleCode","color":{"standardColorIdentifier":"blue"},"roleHeading":"Sample Code"},"variants":[{"paths":["\/documentation\/yubikit\/pivtoolsamplecode"],"traits":[{"interfaceLanguage":"swift"}]}],"schemaVersion":{"minor":3,"patch":0,"major":0},"kind":"article","abstract":[{"type":"text","text":"This sample shows how to build applications that use YubiKeys for PIV (Personal Identity Verification) operations. The command-line tool demonstrates using "},{"type":"reference","identifier":"doc:\/\/yubikit-swift.YubiKit\/documentation\/YubiKit\/PIVSession","isActive":true},{"type":"text","text":" for cryptographic operations, certificate management, and access control."}],"primaryContentSections":[{"content":[{"type":"heading","level":2,"text":"Overview","anchor":"overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The PIV tool shows how to build applications that:"}]},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"Generate cryptographic keys directly on the YubiKey"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Manage certificates and perform digital signatures","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Handle PIN\/PUK authentication and management keys"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Work with different key types (RSA, ECDSA, Ed25519, X25519)"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Query device capabilities and slot information"}]}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This sample demonstrates building secure applications where private keys never leave the YubiKey."}]},{"type":"heading","level":2,"text":"Building PIV Applications","anchor":"Building-PIV-Applications"},{"type":"paragraph","inlineContent":[{"text":"PIV applications provide strong security by keeping private keys in hardware while making them accessible for cryptographic operations. This sample demonstrates the key patterns:","type":"text"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Key lifecycle"}],"type":"strong"},{"text":": Generate keys on-device, get attestation, install certificates","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Cryptographic operations"}],"type":"strong"},{"text":": Sign, decrypt, and key agreement operations","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Access control"}]},{"type":"text","text":": Handle PIN, PUK, and management key authentication"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Device management"}]},{"type":"text","text":": Query capabilities, manage slots, handle different YubiKey models"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Error handling"}]},{"type":"text","text":": Graceful handling of authentication failures and device limitations"}],"type":"paragraph"}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"text":"The typical PIV application workflow involves generating keys directly on the YubiKey, obtaining certificates from a Certificate Authority, then using those keys for authentication, document signing, or encrypted communications.","type":"text"}]},{"type":"heading","level":2,"text":"Working with PIV Keys","anchor":"Working-with-PIV-Keys"},{"type":"heading","level":3,"text":"Key Generation","anchor":"Key-Generation"},{"type":"paragraph","inlineContent":[{"text":"PIV applications typically generate keys directly on the YubiKey to ensure private keys never exist outside the secure element:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["let publicKey = try await session.generateKey(","    in: .authentication,","    type: .rsa(.bits2048),","    pinPolicy: .always,","    touchPolicy: .never",")"]},{"type":"paragraph","inlineContent":[{"text":"The key generation returns the public key while keeping the private key secure on the YubiKey. You can generate different key types depending on your needs:","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["\/\/ RSA keys for traditional PKI compatibility","let rsaKey = try await session.generateKey(in: .authentication, type: .rsa(.bits2048))","","\/\/ ECDSA keys for smaller signatures and better performance","let ecKey = try await session.generateKey(in: .signature, type: .ec(.secp256r1))","","\/\/ Ed25519 for modern cryptographic applications","let ed25519Key = try await session.generateKey(in: .cardAuth, type: .ed25519)","","\/\/ X25519 for key agreement\/ECDH operations","let x25519Key = try await session.generateKey(in: .keyManagement, type: .x25519)"]},{"type":"heading","level":3,"anchor":"PIN-and-Touch-Policies","text":"PIN and Touch Policies"},{"type":"paragraph","inlineContent":[{"text":"When generating keys, you control when authentication is required:","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["let key = try await session.generateKey(","    in: .signature,","    type: .ec(.secp256r1),","    pinPolicy: .once,      \/\/ PIN required once per session","    touchPolicy: .always   \/\/ Physical touch required for each operation",")"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"These policies provide different security levels depending on your application’s requirements."}]},{"anchor":"Key-Attestation","text":"Key Attestation","type":"heading","level":3},{"type":"paragraph","inlineContent":[{"text":"For compliance requirements, you can prove that keys were generated on the YubiKey:","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["let attestationCert = try await session.attestKey(in: .authentication)","\/\/ This certificate proves the key was generated in hardware, not imported"]},{"type":"paragraph","inlineContent":[{"text":"The attestation certificate is signed by Yubico’s key and provides cryptographic proof that the key was generated on-device and hasn’t been copied or imported.","type":"text"}]},{"type":"heading","level":2,"anchor":"Certificate-Management","text":"Certificate Management"},{"type":"paragraph","inlineContent":[{"text":"PIV applications typically work with X.509 certificates paired with the private keys stored on the YubiKey.","type":"text"}]},{"type":"heading","level":3,"anchor":"Storing-Certificates","text":"Storing Certificates"},{"type":"paragraph","inlineContent":[{"text":"After generating a key or receiving a signed certificate, store it in the corresponding slot:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["let certificateData = try Data(contentsOf: certificateURL)","let certificate = try Certificate(derEncoded: Array(certificateData))","","try await session.putCertificate(","    certificate,","    in: .authentication,","    compressed: true  \/\/ Save space on the YubiKey",")"]},{"anchor":"Reading-Certificates","text":"Reading Certificates","type":"heading","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"Applications often need to read certificates for identity verification:"}]},{"type":"codeListing","syntax":"swift","code":["let certificate = try await session.getCertificate(in: .authentication)","\/\/ Use the certificate for identity verification, chain building, etc."]},{"anchor":"Using-PIV-Keys-for-Cryptographic-Operations","text":"Using PIV Keys for Cryptographic Operations","type":"heading","level":2},{"type":"paragraph","inlineContent":[{"text":"Once you have keys and certificates set up, you can use them for cryptographic operations. The private key never leaves the YubiKey - all operations happen on-device.","type":"text"}]},{"level":3,"text":"Digital Signatures","anchor":"Digital-Signatures","type":"heading"},{"inlineContent":[{"text":"Sign documents, challenges, or any data using the private key:","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["let documentHash = SHA256.hash(data: documentData)","let signature = try await session.sign(","    Data(documentHash),","    in: .signature,","    keyType: .ec(.secp256r1),","    using: .hash(.sha256)",")"]},{"type":"paragraph","inlineContent":[{"text":"This is commonly used for document signing, authentication challenges, or code signing applications.","type":"text"}]},{"anchor":"Decryption","text":"Decryption","type":"heading","level":3},{"type":"paragraph","inlineContent":[{"text":"For applications that encrypt data to the YubiKey’s public key:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["let decryptedData = try await session.decrypt(","    encryptedData,","    in: .keyManagement,","    using: .pkcs1v15",")"]},{"type":"heading","level":3,"anchor":"Key-Agreement","text":"Key Agreement"},{"type":"paragraph","inlineContent":[{"text":"For secure communications, use ECDH to establish shared secrets:","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["let sharedSecret = try await session.deriveSharedSecret(","    in: .keyManagement,","    with: peerPublicKey",")","\/\/ Use the shared secret for symmetric encryption"]},{"type":"heading","level":2,"anchor":"PIV-Authentication-and-Access-Control","text":"PIV Authentication and Access Control"},{"type":"paragraph","inlineContent":[{"type":"text","text":"PIV applications need to handle various authentication factors to protect access to private keys."}]},{"type":"heading","level":3,"anchor":"PIN-Authentication","text":"PIN Authentication"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Most PIV operations require PIN verification:"}]},{"code":["let pinResult = try await session.verifyPin(\"123456\")","switch pinResult {","case .success:","    \/\/ PIN verified, can now use keys with PIN policies","case .fail(let attemptsRemaining):","    \/\/ Handle incorrect PIN, show remaining attempts","case .pinLocked:","    \/\/ PIN is locked, need to use PUK","}"],"type":"codeListing","syntax":"swift"},{"type":"heading","level":3,"text":"Management Key Authentication","anchor":"Management-Key-Authentication"},{"type":"paragraph","inlineContent":[{"text":"Administrative operations require management key authentication:","type":"text"}]},{"code":["let defaultManagementKey = Data(repeating: 0x01, count: 24) + Data(repeating: 0xff, count: 8)","try await session.authenticateWith(managementKey: defaultManagementKey)","","\/\/ Now you can generate keys, install certificates, etc."],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"For production applications, change the default management key:","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["let newKey = Data.random(count: 32)","try await session.setManagementKey(newKey, type: .aes256, requiresTouch: false)"]},{"level":3,"text":"PIN Unlock (PUK) Operations","anchor":"PIN-Unlock-PUK-Operations","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"When PINs become locked, use the PUK to unlock:","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["try await session.unblockPinWithPuk(\"12345678\", newPin: \"123456\")"]},{"anchor":"Querying-PIV-Information","text":"Querying PIV Information","type":"heading","level":2},{"type":"heading","level":3,"anchor":"Checking-Whats-in-Each-Slot","text":"Checking What’s in Each Slot"},{"type":"paragraph","inlineContent":[{"text":"Before using a slot, check what’s already there:","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["let metadata = try await session.getSlotMetadata(.authentication)","if metadata.generatedOnDevice {","    print(\"Key was generated on the YubiKey\")","} else {","    print(\"Key was imported from outside\")","}"]},{"level":3,"text":"Feature Detection","anchor":"Feature-Detection","type":"heading"},{"inlineContent":[{"text":"Different YubiKey models support different features:","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["if await session.supports( .ed25519) {","    \/\/ Use modern Ed25519 keys","} else {","    \/\/ Fall back to RSA or ECDSA","}"]},{"inlineContent":[{"text":"This lets your application adapt to different YubiKey capabilities.","type":"text"}],"type":"paragraph"},{"level":2,"text":"Error Handling in PIV Applications","anchor":"Error-Handling-in-PIV-Applications","type":"heading"},{"inlineContent":[{"text":"PIV operations can fail for various reasons - locked PINs, missing authentication, or unsupported operations. The PIV tool demonstrates comprehensive error handling with typed throws:","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["func verifyPinIfProvided(_ pin: String?) async {","    guard let pin = pin else { return }","","    do {","        let result = try await verifyPin(pin)","        switch result {","        case .success:","            break","        case let .fail(retries):","            exitWithError(\"PIN verification failed - \\(retries) tries left.\")","        case .pinLocked:","            exitWithError(\"PIN is blocked.\")","        }","    } catch {","        handlePIVError(error)","    }","}"]},{"inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"handlePIVError"},{"type":"text","text":" helper demonstrates matching on specific "},{"type":"codeVoice","code":"PIVSessionError"},{"type":"text","text":" cases:"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["func handlePIVError(_ error: PIVSessionError) {","    let message: String","    switch error {","    case let .failedResponse(responseStatus, _):","        let statusHex = String(format: \"0x%04X\", responseStatus.rawStatus)","        message = \"YubiKey responded with status \\(statusHex)\"","    case let .invalidPin(retries, _):","        message = retries > 0 ? \"PIN verification failed - \\(retries) tries left.\" : \"PIN is blocked.\"","    case .pinLocked:","        message = \"PIN is blocked.\"","    case .authenticationFailed:","        message = \"Authentication required.\"","    case .featureNotSupported:","        message = \"Operation not supported by this YubiKey.\"","    \/\/ ... handle other cases","    }","    print(\"Error: \\(message)\")","}"]},{"inlineContent":[{"type":"text","text":"With typed throws, the compiler ensures you handle all error cases specific to PIV operations."}],"type":"paragraph"}],"kind":"content"}],"sections":[],"sampleCodeDownload":{"action":{"isActive":true,"overridingTitle":"View Source","type":"reference","identifier":"https:\/\/github.com\/Yubico\/yubikit-swift\/tree\/main\/Samples\/yubikit-piv-tool"},"kind":"sampleDownload"},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/yubikit-swift.YubiKit\/documentation\/YubiKit\/PIVToolSampleCode"},"hierarchy":{"paths":[["doc:\/\/yubikit-swift.YubiKit\/documentation\/YubiKit"]]},"references":{"doc://yubikit-swift.YubiKit/documentation/YubiKit/OATHSampleCode":{"abstract":[{"text":"This sample shows how to build an iOS and macOS app that reads TOTP codes from YubiKeys. The app demonstrates establishing connections, managing connection lifecycle, using ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/yubikit-swift.YubiKit\/documentation\/YubiKit\/OATHSession"},{"text":" to retrieve authentication codes, and ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/yubikit-swift.YubiKit\/documentation\/YubiKit\/ManagementSession"},{"text":" to get device information.","type":"text"}],"kind":"article","role":"sampleCode","title":"OATHSample: Basic OATH app showcasing how to integrate the SDK","identifier":"doc:\/\/yubikit-swift.YubiKit\/documentation\/YubiKit\/OATHSampleCode","url":"\/documentation\/yubikit\/oathsamplecode","type":"topic"},"https://github.com/Yubico/yubikit-swift/tree/main/Samples/yubikit-piv-tool":{"identifier":"https:\/\/github.com\/Yubico\/yubikit-swift\/tree\/main\/Samples\/yubikit-piv-tool","checksum":null,"url":"https:\/\/github.com\/Yubico\/yubikit-swift\/tree\/main\/Samples\/yubikit-piv-tool","type":"download"},"doc://yubikit-swift.YubiKit/documentation/YubiKit":{"abstract":[{"type":"text","text":"Connect and run commands on the different applications on a YubiKey. The framework support connecting using NFC, Lightning and USB."}],"kind":"symbol","identifier":"doc:\/\/yubikit-swift.YubiKit\/documentation\/YubiKit","role":"collection","images":[{"type":"icon","identifier":"documentation-header.png"}],"url":"\/documentation\/yubikit","type":"topic","title":"YubiKit"},"doc://yubikit-swift.YubiKit/documentation/YubiKit/PIVSession":{"abstract":[{"text":"An interface to the PIV application on the YubiKey.","type":"text"}],"kind":"symbol","identifier":"doc:\/\/yubikit-swift.YubiKit\/documentation\/YubiKit\/PIVSession","role":"symbol","url":"\/documentation\/yubikit\/pivsession","fragments":[{"text":"actor","kind":"keyword"},{"text":" ","kind":"text"},{"text":"PIVSession","kind":"identifier"}],"type":"topic","title":"PIVSession","navigatorTitle":[{"text":"PIVSession","kind":"identifier"}]},"doc://yubikit-swift.YubiKit/documentation/YubiKit/ManagementSession":{"abstract":[{"text":"An interface to the Management application on the YubiKey.","type":"text"}],"kind":"symbol","identifier":"doc:\/\/yubikit-swift.YubiKit\/documentation\/YubiKit\/ManagementSession","role":"symbol","url":"\/documentation\/yubikit\/managementsession","fragments":[{"text":"actor","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ManagementSession","kind":"identifier"}],"type":"topic","title":"ManagementSession","navigatorTitle":[{"text":"ManagementSession","kind":"identifier"}]},"doc://yubikit-swift.YubiKit/documentation/YubiKit/OATHSession":{"fragments":[{"text":"actor","kind":"keyword"},{"text":" ","kind":"text"},{"text":"OATHSession","kind":"identifier"}],"navigatorTitle":[{"text":"OATHSession","kind":"identifier"}],"abstract":[{"text":"An interface to the OATH application on the YubiKey.","type":"text"}],"kind":"symbol","role":"symbol","title":"OATHSession","type":"topic","identifier":"doc:\/\/yubikit-swift.YubiKit\/documentation\/YubiKit\/OATHSession","url":"\/documentation\/yubikit\/oathsession"},"documentation-header.png":{"identifier":"documentation-header.png","variants":[{"url":"\/images\/yubikit-swift.YubiKit\/documentation-header@2x.png","traits":["2x","light"]},{"url":"\/images\/yubikit-swift.YubiKit\/documentation-header~dark@2x.png","traits":["2x","dark"]}],"alt":"YubiKeys in a row","type":"image"}}}
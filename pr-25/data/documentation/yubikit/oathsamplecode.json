{"metadata":{"modules":[{"name":"YubiKit"}],"role":"sampleCode","roleHeading":"Sample Code","title":"OATHSample: Basic OATH app showcasing how to integrate the SDK","color":{"standardColorIdentifier":"green"}},"schemaVersion":{"major":0,"minor":3,"patch":0},"kind":"article","abstract":[{"text":"This sample project shows how to integrate the SDK into an iOS and MacOS app. It lists OATH codes","type":"text"},{"text":" ","type":"text"},{"text":"using the ","type":"text"},{"identifier":"doc:\/\/YubiKit\/documentation\/YubiKit\/OATHSession","type":"reference","isActive":true},{"type":"text","text":" and has a separate view that displays the version number of the key. The version"},{"type":"text","text":" "},{"type":"text","text":"number is retrieved using the "},{"identifier":"doc:\/\/YubiKit\/documentation\/YubiKit\/ManagementSession","type":"reference","isActive":true},{"type":"text","text":"."}],"primaryContentSections":[{"kind":"content","content":[{"anchor":"overview","level":2,"text":"Overview","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The sample project consist of two views. One that list the OATH codes calculated, either using USB-C, Lightning or NFC."},{"text":" ","type":"text"},{"type":"text","text":"The other view simply displays the version number of the YubiKey. This view also supports all three connection types."}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"This is only a sample project and there is currently no handling for password protected YubiKeys."}]}],"name":"Note","style":"note","type":"aside"},{"level":2,"text":"OATH view","type":"heading","anchor":"OATH-view"},{"type":"paragraph","inlineContent":[{"text":"The main function of the OATH part of the app is the ","type":"text"},{"type":"codeVoice","code":"startWiredConnection()"},{"text":" function. This will cancel any previous","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"wiredConnectionTask"},{"text":" and create a new one. In the Task it will use the ","type":"text"},{"type":"reference","identifier":"doc:\/\/YubiKit\/documentation\/YubiKit\/ConnectionHelper","isActive":true},{"text":" to start waiting for","type":"text"},{"type":"text","text":" "},{"type":"text","text":"a wired connection. Depending on the device this will either be a "},{"type":"codeVoice","code":"LightningConnection"},{"type":"text","text":" or a "},{"isActive":true,"type":"reference","identifier":"doc:\/\/YubiKit\/documentation\/YubiKit\/SmartCardConnection"},{"text":".","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Once a connection has been established we check that the task hasn’t been cancelled before proceeding."},{"text":" ","type":"text"},{"type":"text","text":"The "},{"type":"codeVoice","code":"calculateCodes(connection:)"},{"type":"text","text":" function creates a new "},{"isActive":true,"type":"reference","identifier":"doc:\/\/YubiKit\/documentation\/YubiKit\/OATHSession"},{"text":" and","type":"text"},{"type":"text","text":" "},{"type":"text","text":"calls "},{"type":"codeVoice","code":".calculateCodes()"},{"type":"text","text":" on the session. The result is then used to populate the list of codes in the UI."}]},{"inlineContent":[{"type":"text","text":"At this point the app will wait for the connection to close. This can be caused by the user unplugging the YubiKey or"},{"type":"text","text":" "},{"text":"a connection error of some sort forcing the connection to close. If the connection is closed the app will clean up","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the user interface and recursively call "},{"code":"startWiredConnection()","type":"codeVoice"},{"type":"text","text":" again."}],"type":"paragraph"},{"syntax":"swift","code":["@MainActor func startWiredConnection() {","    wiredConnectionTask?.cancel()","    wiredConnectionTask = Task {","        do {","            error = nil","            \/\/ Wait for a suitable wired connection for the current device.","            let connection = try await ConnectionHelper.anyWiredConnection()","            guard !Task.isCancelled else { return }","            try await self.calculateCodes(connection: connection)","            \/\/ Wait for the connection to close, i.e the YubiKey to be unplugged from the device.","            \/\/ If the YubiKey was simply unplugged it will return nil, otherwise the error","            \/\/ causing the disconnect will be returned.","            self.error = await connection.connectionDidClose()","            self.accounts.removeAll()","            self.source = \"no connection\"","            guard !Task.isCancelled else { return }","            \/\/ Restart the wired connection and go back to waiting for a YubiKey to be","            \/\/ inserted again.","            self.startWiredConnection()","        } catch {","            self.error = error","        }","    }","}","","@MainActor private func calculateCodes(connection: Connection) async throws {","    self.error = nil","    let session = try await OATHSession.session(withConnection: connection)","    let result = try await session.calculateCodes()","    self.accounts = result.map { return Account(label: $0.0.label, code: $0.1?.code ?? \"****\") }","    self.source = connection.connectionType","}"],"type":"codeListing"},{"level":2,"text":"Settings view","type":"heading","anchor":"Settings-view"},{"inlineContent":[{"text":"To bring up the settings view we’ve added a ","type":"text"},{"type":"codeVoice","code":"Button"},{"type":"text","text":" to the "},{"code":"OATHListView","type":"codeVoice"},{"type":"text","text":". The button will stop"},{"text":" ","type":"text"},{"type":"text","text":"any wired connections and cancel the wait for new connections. It will then present the "},{"code":"SettingsView","type":"codeVoice"},{"text":" ","type":"text"},{"type":"text","text":"as a SwiftUI sheet."}],"type":"paragraph"},{"code":["Button(action: { model.stopWiredConnection(); isPresentingSettings.toggle() }) {","    Image(systemName: \"ellipsis.circle\")","}",".sheet(isPresented: $isPresentingSettings, onDismiss: {","    model.startWiredConnection() \/\/ Restart wired connection once the SettingsView has been dismissed.","}, content: {","    SettingsView(model: SettingsModel())","})"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"code":"SettingsModel","type":"codeVoice"},{"text":" is simpler since it will only retrieve the version number once when it appears","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and it does not handle YubiKeys being unplugged and plugged back again. In this case we can use the"},{"text":" ","type":"text"},{"type":"codeVoice","code":"ConnectionHelper.anyConnection()"},{"text":" function that will return any wired YubiKey that might be connected","type":"text"},{"type":"text","text":" "},{"text":"or, if no wired key is present it will start scanning for a NFC key. Once connected we create","type":"text"},{"type":"text","text":" "},{"text":"the ","type":"text"},{"type":"reference","identifier":"doc:\/\/YubiKit\/documentation\/YubiKit\/ManagementSession","isActive":true},{"text":" and get the key version.","type":"text"}]},{"syntax":"swift","code":["@MainActor func getKeyVersion() {","    Task {","        self.error = nil","        do {","            let connection = try await ConnectionHelper.anyConnection()","            let session = try await ManagementSession.session(withConnection: connection)","            self.keyVersion = session.version.description","            #if os(iOS)","            if let nfcConnection = connection.nfcConnection {","                self.connection = \"NFC\"","                await nfcConnection.close(message: \"YubiKey version read\")","            } else {","                self.connection = connection as? SmartCardConnection != nil ? \"SmartCard\" : \"Lightning\"","            }","            #else","            self.connection = \"SmartCard\"","            #endif","        } catch {","            self.error = error","        }","    }","}"],"type":"codeListing"}]}],"sampleCodeDownload":{"kind":"sampleDownload","action":{"identifier":"https:\/\/github.com\/Yubico\/yubikit-swift\/raw\/main\/Samples\/oath-sample.zip","isActive":true,"type":"reference","overridingTitle":"View Source"}},"hierarchy":{"paths":[["doc:\/\/YubiKit\/documentation\/YubiKit"]]},"variants":[{"paths":["\/documentation\/yubikit\/oathsamplecode"],"traits":[{"interfaceLanguage":"swift"}]}],"sections":[],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/YubiKit\/documentation\/YubiKit\/OATHSampleCode"},"references":{"doc://YubiKit/documentation/YubiKit/OATHSession":{"identifier":"doc:\/\/YubiKit\/documentation\/YubiKit\/OATHSession","url":"\/documentation\/yubikit\/oathsession","title":"OATHSession","kind":"symbol","role":"symbol","fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"text":"OATHSession","kind":"identifier"}],"type":"topic","navigatorTitle":[{"text":"OATHSession","kind":"identifier"}],"abstract":[{"text":"An interface to the OATH application on the YubiKey.","type":"text"}]},"documentation-header.png":{"identifier":"documentation-header.png","type":"image","variants":[{"url":"\/images\/YubiKit\/documentation-header@2x.png","traits":["2x","light"]},{"traits":["2x","dark"],"url":"\/images\/YubiKit\/documentation-header~dark@2x.png"}],"alt":"YubiKeys in a row"},"doc://YubiKit/documentation/YubiKit/ConnectionHelper":{"abstract":[{"type":"text","text":"ConnectionHelper simplifies the creation of different connections to the YubiKey. It can either return"},{"text":" ","type":"text"},{"type":"text","text":"a connection of any type from a single function or provide a AsyncSequence implementation allowing"},{"type":"text","text":" "},{"type":"text","text":"you to use a for loop awaiting YubiKeys to be inserted and removed from a device."}],"fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ConnectionHelper","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/YubiKit\/documentation\/YubiKit\/ConnectionHelper","title":"ConnectionHelper","navigatorTitle":[{"kind":"identifier","text":"ConnectionHelper"}],"kind":"symbol","role":"symbol","url":"\/documentation\/yubikit\/connectionhelper"},"doc://YubiKit/documentation/YubiKit/SmartCardConnection":{"kind":"symbol","role":"symbol","url":"\/documentation\/yubikit\/smartcardconnection","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"SmartCardConnection","kind":"identifier"}],"type":"topic","navigatorTitle":[{"kind":"identifier","text":"SmartCardConnection"}],"identifier":"doc:\/\/YubiKit\/documentation\/YubiKit\/SmartCardConnection","title":"SmartCardConnection","abstract":[{"text":"A connection to the YubiKey utilizing the USB-C port and the TKSmartCard implementation from","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the CryptoTokenKit framework."}]},"doc://YubiKit/documentation/YubiKit/ManagementSession":{"fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"ManagementSession"}],"url":"\/documentation\/yubikit\/managementsession","role":"symbol","title":"ManagementSession","identifier":"doc:\/\/YubiKit\/documentation\/YubiKit\/ManagementSession","type":"topic","kind":"symbol","navigatorTitle":[{"text":"ManagementSession","kind":"identifier"}],"abstract":[{"text":"An interface to the Management application on the YubiKey.","type":"text"}]},"https://github.com/Yubico/yubikit-swift/raw/main/Samples/oath-sample.zip":{"identifier":"https:\/\/github.com\/Yubico\/yubikit-swift\/raw\/main\/Samples\/oath-sample.zip","url":"https:\/\/github.com\/Yubico\/yubikit-swift\/raw\/main\/Samples\/oath-sample.zip","checksum":null,"type":"download"},"doc://YubiKit/documentation/YubiKit":{"role":"collection","title":"YubiKit","identifier":"doc:\/\/YubiKit\/documentation\/YubiKit","kind":"symbol","type":"topic","images":[{"identifier":"documentation-header.png","type":"icon"}],"url":"\/documentation\/yubikit","abstract":[{"type":"text","text":"Connect and run commands on the different applications on a YubiKey. The framework support connecting using NFC, Lightning and USB-C."}]}}}
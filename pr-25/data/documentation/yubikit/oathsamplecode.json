{"kind":"article","schemaVersion":{"patch":0,"minor":3,"major":0},"hierarchy":{"paths":[["doc:\/\/YubiKit\/documentation\/YubiKit"]]},"primaryContentSections":[{"kind":"content","content":[{"anchor":"overview","text":"Overview","level":2,"type":"heading"},{"type":"paragraph","inlineContent":[{"text":"The sample project consist of two views. One that list the OATH codes calculated, either using USB-C, Lightning or NFC.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"The other view simply displays the version number of the YubiKey. This view also supports all three connection types."}]},{"name":"Note","type":"aside","style":"note","content":[{"type":"paragraph","inlineContent":[{"text":"This is only a sample project and there is currently no handling for password protected YubiKeys.","type":"text"}]}]},{"level":2,"anchor":"OATH-view","text":"OATH view","type":"heading"},{"inlineContent":[{"type":"text","text":"The main function of the OATH part of the app is the "},{"type":"codeVoice","code":"startWiredConnection()"},{"text":" function. This will cancel any previous","type":"text"},{"text":" ","type":"text"},{"code":"wiredConnectionTask","type":"codeVoice"},{"type":"text","text":" and create a new one. In the Task it will use the "},{"type":"reference","identifier":"doc:\/\/YubiKit\/documentation\/YubiKit\/ConnectionHelper","isActive":true},{"type":"text","text":" to start waiting for"},{"type":"text","text":" "},{"type":"text","text":"a wired connection. Depending on the device this will either be a "},{"type":"codeVoice","code":"LightningConnection"},{"type":"text","text":" or a "},{"isActive":true,"identifier":"doc:\/\/YubiKit\/documentation\/YubiKit\/SmartCardConnection","type":"reference"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Once a connection has been established we check that the task hasn’t been cancelled before proceeding."},{"type":"text","text":" "},{"type":"text","text":"The "},{"type":"codeVoice","code":"calculateCodes(connection:)"},{"type":"text","text":" function creates a new "},{"type":"reference","identifier":"doc:\/\/YubiKit\/documentation\/YubiKit\/OATHSession","isActive":true},{"type":"text","text":" and"},{"text":" ","type":"text"},{"text":"calls ","type":"text"},{"type":"codeVoice","code":".calculateCodes()"},{"type":"text","text":" on the session. The result is then used to populate the list of codes in the UI."}],"type":"paragraph"},{"inlineContent":[{"text":"At this point the app will wait for the connection to close. This can be caused by the user unplugging the YubiKey or","type":"text"},{"type":"text","text":" "},{"type":"text","text":"a connection error of some sort forcing the connection to close. If the connection is closed the app will clean up"},{"type":"text","text":" "},{"text":"the user interface and recursively call ","type":"text"},{"code":"startWiredConnection()","type":"codeVoice"},{"text":" again.","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["@MainActor func startWiredConnection() {","    wiredConnectionTask?.cancel()","    wiredConnectionTask = Task {","        do {","            error = nil","            \/\/ Wait for a suitable wired connection for the current device.","            let connection = try await ConnectionHelper.anyWiredConnection()","            guard !Task.isCancelled else { return }","            try await self.calculateCodes(connection: connection)","            \/\/ Wait for the connection to close, i.e the YubiKey to be unplugged from the device.","            \/\/ If the YubiKey was simply unplugged it will return nil, otherwise the error","            \/\/ causing the disconnect will be returned.","            self.error = await connection.connectionDidClose()","            self.accounts.removeAll()","            self.source = \"no connection\"","            guard !Task.isCancelled else { return }","            \/\/ Restart the wired connection and go back to waiting for a YubiKey to be","            \/\/ inserted again.","            self.startWiredConnection()","        } catch {","            self.error = error","        }","    }","}","","@MainActor private func calculateCodes(connection: Connection) async throws {","    self.error = nil","    let session = try await OATHSession.session(withConnection: connection)","    let result = try await session.calculateCodes()","    self.accounts = result.map { return Account(label: $0.0.label, code: $0.1?.code ?? \"****\") }","    self.source = connection.connectionType","}"]},{"type":"heading","text":"Settings view","level":2,"anchor":"Settings-view"},{"type":"paragraph","inlineContent":[{"type":"text","text":"To bring up the settings view we’ve added a "},{"code":"Button","type":"codeVoice"},{"text":" to the ","type":"text"},{"code":"OATHListView","type":"codeVoice"},{"type":"text","text":". The button will stop"},{"text":" ","type":"text"},{"text":"any wired connections and cancel the wait for new connections. It will then present the ","type":"text"},{"code":"SettingsView","type":"codeVoice"},{"text":" ","type":"text"},{"type":"text","text":"as a SwiftUI sheet."}]},{"type":"codeListing","code":["Button(action: { model.stopWiredConnection(); isPresentingSettings.toggle() }) {","    Image(systemName: \"ellipsis.circle\")","}",".sheet(isPresented: $isPresentingSettings, onDismiss: {","    model.startWiredConnection() \/\/ Restart wired connection once the SettingsView has been dismissed.","}, content: {","    SettingsView(model: SettingsModel())","})"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"code":"SettingsModel","type":"codeVoice"},{"type":"text","text":" is simpler since it will only retrieve the version number once when it appears"},{"text":" ","type":"text"},{"text":"and it does not handle YubiKeys being unplugged and plugged back again. In this case we can use the","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"ConnectionHelper.anyConnection()"},{"type":"text","text":" function that will return any wired YubiKey that might be connected"},{"type":"text","text":" "},{"type":"text","text":"or, if no wired key is present it will start scanning for a NFC key. Once connected we create"},{"text":" ","type":"text"},{"text":"the ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/YubiKit\/documentation\/YubiKit\/ManagementSession"},{"text":" and get the key version.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["@MainActor func getKeyVersion() {","    Task {","        self.error = nil","        do {","            let connection = try await ConnectionHelper.anyConnection()","            let session = try await ManagementSession.session(withConnection: connection)","            self.keyVersion = session.version.description","            #if os(iOS)","            if let nfcConnection = connection.nfcConnection {","                self.connection = \"NFC\"","                await nfcConnection.close(message: \"YubiKey version read\")","            } else {","                self.connection = connection as? SmartCardConnection != nil ? \"SmartCard\" : \"Lightning\"","            }","            #else","            self.connection = \"SmartCard\"","            #endif","        } catch {","            self.error = error","        }","    }","}"]}]}],"sampleCodeDownload":{"kind":"sampleDownload","action":{"overridingTitle":"View Source","type":"reference","isActive":true,"identifier":"https:\/\/github.com\/Yubico\/yubikit-swift\/raw\/main\/Samples\/oath-sample.zip"}},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/YubiKit\/documentation\/YubiKit\/OATHSampleCode"},"abstract":[{"type":"text","text":"This sample project shows how to integrate the SDK into an iOS and MacOS app. It lists OATH codes"},{"type":"text","text":" "},{"type":"text","text":"using the "},{"type":"reference","identifier":"doc:\/\/YubiKit\/documentation\/YubiKit\/OATHSession","isActive":true},{"text":" and has a separate view that displays the version number of the key. The version","type":"text"},{"type":"text","text":" "},{"text":"number is retrieved using the ","type":"text"},{"type":"reference","identifier":"doc:\/\/YubiKit\/documentation\/YubiKit\/ManagementSession","isActive":true},{"type":"text","text":"."}],"variants":[{"paths":["\/documentation\/yubikit\/oathsamplecode"],"traits":[{"interfaceLanguage":"swift"}]}],"metadata":{"role":"sampleCode","roleHeading":"Sample Code","modules":[{"name":"YubiKit"}],"color":{"standardColorIdentifier":"green"},"title":"OATHSample: Basic OATH app showcasing how to integrate the SDK"},"sections":[],"references":{"doc://YubiKit/documentation/YubiKit/ConnectionHelper":{"abstract":[{"type":"text","text":"ConnectionHelper simplifies the creation of different connections to the YubiKey. It can either return"},{"text":" ","type":"text"},{"type":"text","text":"a connection of any type from a single function or provide a AsyncSequence implementation allowing"},{"type":"text","text":" "},{"text":"you to use a for loop awaiting YubiKeys to be inserted and removed from a device.","type":"text"}],"kind":"symbol","title":"ConnectionHelper","url":"\/documentation\/yubikit\/connectionhelper","navigatorTitle":[{"text":"ConnectionHelper","kind":"identifier"}],"fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ConnectionHelper","kind":"identifier"}],"identifier":"doc:\/\/YubiKit\/documentation\/YubiKit\/ConnectionHelper","type":"topic","role":"symbol"},"documentation-header.png":{"type":"image","identifier":"documentation-header.png","alt":"YubiKeys in a row","variants":[{"traits":["2x","light"],"url":"\/images\/YubiKit\/documentation-header@2x.png"},{"traits":["2x","dark"],"url":"\/images\/YubiKit\/documentation-header~dark@2x.png"}]},"doc://YubiKit/documentation/YubiKit":{"type":"topic","kind":"symbol","identifier":"doc:\/\/YubiKit\/documentation\/YubiKit","url":"\/documentation\/yubikit","abstract":[{"type":"text","text":"Connect and run commands on the different applications on a YubiKey. The framework support connecting using NFC, Lightning and USB-C."}],"images":[{"type":"icon","identifier":"documentation-header.png"}],"title":"YubiKit","role":"collection"},"doc://YubiKit/documentation/YubiKit/ManagementSession":{"role":"symbol","navigatorTitle":[{"text":"ManagementSession","kind":"identifier"}],"kind":"symbol","abstract":[{"text":"An interface to the Management application on the YubiKey.","type":"text"}],"title":"ManagementSession","url":"\/documentation\/yubikit\/managementsession","identifier":"doc:\/\/YubiKit\/documentation\/YubiKit\/ManagementSession","type":"topic","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ManagementSession"}]},"https://github.com/Yubico/yubikit-swift/raw/main/Samples/oath-sample.zip":{"type":"download","checksum":null,"identifier":"https:\/\/github.com\/Yubico\/yubikit-swift\/raw\/main\/Samples\/oath-sample.zip","url":"https:\/\/github.com\/Yubico\/yubikit-swift\/raw\/main\/Samples\/oath-sample.zip"},"doc://YubiKit/documentation/YubiKit/OATHSession":{"kind":"symbol","type":"topic","url":"\/documentation\/yubikit\/oathsession","role":"symbol","fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"OATHSession"}],"abstract":[{"text":"An interface to the OATH application on the YubiKey.","type":"text"}],"identifier":"doc:\/\/YubiKit\/documentation\/YubiKit\/OATHSession","navigatorTitle":[{"text":"OATHSession","kind":"identifier"}],"title":"OATHSession"},"doc://YubiKit/documentation/YubiKit/SmartCardConnection":{"role":"symbol","type":"topic","url":"\/documentation\/yubikit\/smartcardconnection","title":"SmartCardConnection","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"SmartCardConnection","kind":"identifier"}],"identifier":"doc:\/\/YubiKit\/documentation\/YubiKit\/SmartCardConnection","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"SmartCardConnection"}],"abstract":[{"text":"A connection to the YubiKey utilizing the USB-C port and the TKSmartCard implementation from","type":"text"},{"type":"text","text":" "},{"text":"the CryptoTokenKit framework.","type":"text"}]}}}
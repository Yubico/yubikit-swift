{"identifier":{"url":"doc:\/\/YubiKit\/documentation\/YubiKit\/PIVToolSampleCode","interfaceLanguage":"swift"},"schemaVersion":{"minor":3,"major":0,"patch":0},"abstract":[{"text":"This sample shows how to build applications that use YubiKeys for PIV (Personal Identity Verification) operations. The command-line tool demonstrates using ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/YubiKit\/documentation\/YubiKit\/PIVSession"},{"text":" for cryptographic operations, certificate management, and access control.","type":"text"}],"seeAlsoSections":[{"identifiers":["doc:\/\/YubiKit\/documentation\/YubiKit\/OATHSampleCode"],"anchor":"Sample-code","generated":true,"title":"Sample code"}],"primaryContentSections":[{"content":[{"text":"Overview","type":"heading","level":2,"anchor":"overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The PIV tool shows how to build applications that:"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"Generate cryptographic keys directly on the YubiKey"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Manage certificates and perform digital signatures"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Handle PIN\/PUK authentication and management keys","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Work with different key types (RSA, ECDSA, Ed25519, X25519)","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Query device capabilities and slot information"}],"type":"paragraph"}]}]},{"type":"paragraph","inlineContent":[{"text":"This sample demonstrates building secure applications where private keys never leave the YubiKey.","type":"text"}]},{"text":"Building PIV Applications","type":"heading","level":2,"anchor":"Building-PIV-Applications"},{"type":"paragraph","inlineContent":[{"text":"PIV applications provide strong security by keeping private keys in hardware while making them accessible for cryptographic operations. This sample demonstrates the key patterns:","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Key lifecycle"}]},{"text":": Generate keys on-device, get attestation, install certificates","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Cryptographic operations","type":"text"}],"type":"strong"},{"type":"text","text":": Sign, decrypt, and key agreement operations"}]}]},{"content":[{"inlineContent":[{"inlineContent":[{"text":"Access control","type":"text"}],"type":"strong"},{"text":": Handle PIN, PUK, and management key authentication","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Device management"}]},{"type":"text","text":": Query capabilities, manage slots, handle different YubiKey models"}]}]},{"content":[{"inlineContent":[{"inlineContent":[{"text":"Error handling","type":"text"}],"type":"strong"},{"text":": Graceful handling of authentication failures and device limitations","type":"text"}],"type":"paragraph"}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The typical PIV application workflow involves generating keys directly on the YubiKey, obtaining certificates from a Certificate Authority, then using those keys for authentication, document signing, or encrypted communications."}]},{"text":"Working with PIV Keys","type":"heading","level":2,"anchor":"Working-with-PIV-Keys"},{"text":"Key Generation","type":"heading","level":3,"anchor":"Key-Generation"},{"type":"paragraph","inlineContent":[{"text":"PIV applications typically generate keys directly on the YubiKey to ensure private keys never exist outside the secure element:","type":"text"}]},{"code":["let publicKey = try await session.generateKeyInSlot(","    slot: .authentication,","    type: .rsa(.bits2048),","    pinPolicy: .always,","    touchPolicy: .never",")"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"The key generation returns the public key while keeping the private key secure on the YubiKey. You can generate different key types depending on your needs:","type":"text"}]},{"code":["\/\/ RSA keys for traditional PKI compatibility","let rsaKey = try await session.generateKeyInSlot(slot: .authentication, type: .rsa(.bits2048))","","\/\/ ECDSA keys for smaller signatures and better performance","let ecKey = try await session.generateKeyInSlot(slot: .signature, type: .ec(.secp256r1))","","\/\/ Ed25519 for modern cryptographic applications","let ed25519Key = try await session.generateKeyInSlot(slot: .cardAuthentication, type: .ed25519)","","\/\/ X25519 for key agreement\/ECDH operations","let x25519Key = try await session.generateKeyInSlot(slot: .keyManagement, type: .x25519)"],"type":"codeListing","syntax":"swift"},{"text":"PIN and Touch Policies","type":"heading","level":3,"anchor":"PIN-and-Touch-Policies"},{"type":"paragraph","inlineContent":[{"type":"text","text":"When generating keys, you control when authentication is required:"}]},{"code":["let key = try await session.generateKeyInSlot(","    slot: .signature,","    type: .ec(.secp256r1),","    pinPolicy: .once,      \/\/ PIN required once per session","    touchPolicy: .always   \/\/ Physical touch required for each operation",")"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"These policies provide different security levels depending on your application’s requirements."}]},{"text":"Key Attestation","type":"heading","level":3,"anchor":"Key-Attestation"},{"type":"paragraph","inlineContent":[{"type":"text","text":"For compliance requirements, you can prove that keys were generated on the YubiKey:"}]},{"code":["let attestationCert = try await session.attestKeyInSlot(slot: .authentication)","\/\/ This certificate proves the key was generated in hardware, not imported"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"The attestation certificate is signed by Yubico’s key and provides cryptographic proof that the key was generated on-device and hasn’t been copied or imported.","type":"text"}]},{"text":"Certificate Management","type":"heading","level":2,"anchor":"Certificate-Management"},{"type":"paragraph","inlineContent":[{"type":"text","text":"PIV applications typically work with X.509 certificates paired with the private keys stored on the YubiKey."}]},{"text":"Storing Certificates","type":"heading","level":3,"anchor":"Storing-Certificates"},{"type":"paragraph","inlineContent":[{"type":"text","text":"After generating a key or receiving a signed certificate, store it in the corresponding slot:"}]},{"code":["let certificateData = try Data(contentsOf: certificateURL)","let certificate = try Certificate(derEncoded: Array(certificateData))","","try await session.putCertificate(","    certificate: certificate,","    inSlot: .authentication,","    compress: true  \/\/ Save space on the YubiKey",")"],"type":"codeListing","syntax":"swift"},{"text":"Reading Certificates","type":"heading","level":3,"anchor":"Reading-Certificates"},{"type":"paragraph","inlineContent":[{"text":"Applications often need to read certificates for identity verification:","type":"text"}]},{"code":["let certificate = try await session.getCertificateInSlot(.authentication)","\/\/ Use the certificate for identity verification, chain building, etc."],"type":"codeListing","syntax":"swift"},{"text":"Using PIV Keys for Cryptographic Operations","type":"heading","level":2,"anchor":"Using-PIV-Keys-for-Cryptographic-Operations"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Once you have keys and certificates set up, you can use them for cryptographic operations. The private key never leaves the YubiKey - all operations happen on-device."}]},{"text":"Digital Signatures","type":"heading","level":3,"anchor":"Digital-Signatures"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Sign documents, challenges, or any data using the private key:"}]},{"code":["let documentHash = SHA256.hash(data: documentData)","let signature = try await session.signWithKeyInSlot(","    .signature,","    keyType: .ec(.secp256r1),","    algorithm: .ecdsaSignatureMessageX962SHA256,","    message: Data(documentHash)",")"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"This is commonly used for document signing, authentication challenges, or code signing applications.","type":"text"}]},{"text":"Decryption","type":"heading","level":3,"anchor":"Decryption"},{"type":"paragraph","inlineContent":[{"text":"For applications that encrypt data to the YubiKey’s public key:","type":"text"}]},{"code":["let decryptedData = try await session.decryptWithKeyInSlot(","    slot: .keyManagement,","    algorithm: .rsaDecryptionPKCS1,","    encrypted: encryptedData",")"],"type":"codeListing","syntax":"swift"},{"text":"Key Agreement","type":"heading","level":3,"anchor":"Key-Agreement"},{"type":"paragraph","inlineContent":[{"type":"text","text":"For secure communications, use ECDH to establish shared secrets:"}]},{"code":["let sharedSecret = try await session.calculateSecretKeyInSlot(","    slot: .keyManagement,","    peerPublicKey: peerPublicKey",")","\/\/ Use the shared secret for symmetric encryption"],"type":"codeListing","syntax":"swift"},{"text":"PIV Authentication and Access Control","type":"heading","level":2,"anchor":"PIV-Authentication-and-Access-Control"},{"type":"paragraph","inlineContent":[{"text":"PIV applications need to handle various authentication factors to protect access to private keys.","type":"text"}]},{"text":"PIN Authentication","type":"heading","level":3,"anchor":"PIN-Authentication"},{"type":"paragraph","inlineContent":[{"text":"Most PIV operations require PIN verification:","type":"text"}]},{"code":["let pinResult = try await session.verifyPin(\"123456\")","switch pinResult {","case .success:","    \/\/ PIN verified, can now use keys with PIN policies","case .fail(let attemptsRemaining):","    \/\/ Handle incorrect PIN, show remaining attempts","case .pinLocked:","    \/\/ PIN is locked, need to use PUK","}"],"type":"codeListing","syntax":"swift"},{"text":"Management Key Authentication","type":"heading","level":3,"anchor":"Management-Key-Authentication"},{"type":"paragraph","inlineContent":[{"text":"Administrative operations require management key authentication:","type":"text"}]},{"code":["let defaultManagementKey = Data(repeating: 0x01, count: 24) + Data(repeating: 0xff, count: 8)","try await session.authenticateWith(managementKey: defaultManagementKey)","","\/\/ Now you can generate keys, install certificates, etc."],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"For production applications, change the default management key:","type":"text"}]},{"code":["let newKey = Data.random(count: 32)","try await session.setManagementKey(newKey, type: .aes256, requiresTouch: false)"],"type":"codeListing","syntax":"swift"},{"text":"PIN Unlock (PUK) Operations","type":"heading","level":3,"anchor":"PIN-Unlock-PUK-Operations"},{"type":"paragraph","inlineContent":[{"text":"When PINs become locked, use the PUK to unlock:","type":"text"}]},{"code":["try await session.unblockPinWithPuk(\"12345678\", newPin: \"123456\")"],"type":"codeListing","syntax":"swift"},{"text":"Querying PIV Information","type":"heading","level":2,"anchor":"Querying-PIV-Information"},{"text":"Checking What’s in Each Slot","type":"heading","level":3,"anchor":"Checking-Whats-in-Each-Slot"},{"type":"paragraph","inlineContent":[{"text":"Before using a slot, check what’s already there:","type":"text"}]},{"code":["let metadata = try await session.getSlotMetadata(.authentication)","if metadata.generatedOnDevice {","    print(\"Key was generated on the YubiKey\")","} else {","    print(\"Key was imported from outside\")","}"],"type":"codeListing","syntax":"swift"},{"text":"Feature Detection","type":"heading","level":3,"anchor":"Feature-Detection"},{"type":"paragraph","inlineContent":[{"text":"Different YubiKey models support different features:","type":"text"}]},{"code":["if await session.supports(.ed25519) {","    \/\/ Use modern Ed25519 keys","} else {","    \/\/ Fall back to RSA or ECDSA","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"This lets your application adapt to different YubiKey capabilities.","type":"text"}]},{"type":"heading","level":2,"text":"Error Handling in PIV Applications","anchor":"Error-Handling-in-PIV-Applications"},{"type":"paragraph","inlineContent":[{"type":"text","text":"PIV operations can fail for various reasons - locked PINs, missing authentication, or unsupported operations:"}]},{"type":"codeListing","syntax":"swift","code":["do {","    let result = try await session.verifyPin(pin)","    switch result {","    case .success:","        \/\/ PIN verified successfully","    case .fail(let attemptsRemaining):","        print(\"PIN verification failed. \\(attemptsRemaining) attempts remaining.\")","    case .pinLocked:","        print(\"PIN is locked. Use PUK to unlock.\")","    }","} catch PIV.SessionError.authenticationFailed {","    print(\"Management key authentication required.\")","} catch {","    print(\"PIN verification error: \\(error)\")","}"]}],"kind":"content"}],"sections":[],"sampleCodeDownload":{"action":{"type":"reference","identifier":"https:\/\/github.com\/Yubico\/yubikit-swift\/tree\/main\/Samples\/yubikit-piv-tool","overridingTitle":"View Source","isActive":true},"kind":"sampleDownload"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/yubikit\/pivtoolsamplecode"]}],"kind":"article","metadata":{"modules":[{"name":"YubiKit"}],"roleHeading":"Sample Code","title":"PIVTool: Building PIV applications with YubiKey","role":"sampleCode","color":{"standardColorIdentifier":"blue"}},"hierarchy":{"paths":[["doc:\/\/YubiKit\/documentation\/YubiKit"]]},"references":{"https://github.com/Yubico/yubikit-swift/tree/main/Samples/yubikit-piv-tool":{"type":"download","url":"https:\/\/github.com\/Yubico\/yubikit-swift\/tree\/main\/Samples\/yubikit-piv-tool","identifier":"https:\/\/github.com\/Yubico\/yubikit-swift\/tree\/main\/Samples\/yubikit-piv-tool","checksum":null},"documentation-header.png":{"type":"image","identifier":"documentation-header.png","alt":"YubiKeys in a row","variants":[{"url":"\/images\/YubiKit\/documentation-header@2x.png","traits":["2x","light"]},{"url":"\/images\/YubiKit\/documentation-header~dark@2x.png","traits":["2x","dark"]}]},"doc://YubiKit/documentation/YubiKit/PIVSession":{"kind":"symbol","abstract":[{"text":"An interface to the PIV application on the YubiKey.","type":"text"}],"url":"\/documentation\/yubikit\/pivsession","type":"topic","role":"symbol","title":"PIVSession","fragments":[{"kind":"keyword","text":"actor"},{"kind":"text","text":" "},{"kind":"identifier","text":"PIVSession"}],"navigatorTitle":[{"kind":"identifier","text":"PIVSession"}],"identifier":"doc:\/\/YubiKit\/documentation\/YubiKit\/PIVSession"},"doc://YubiKit/documentation/YubiKit/OATHSession":{"title":"OATHSession","fragments":[{"text":"actor","kind":"keyword"},{"text":" ","kind":"text"},{"text":"OATHSession","kind":"identifier"}],"type":"topic","kind":"symbol","url":"\/documentation\/yubikit\/oathsession","navigatorTitle":[{"text":"OATHSession","kind":"identifier"}],"abstract":[{"text":"An interface to the OATH application on the YubiKey.","type":"text"}],"role":"symbol","identifier":"doc:\/\/YubiKit\/documentation\/YubiKit\/OATHSession"},"doc://YubiKit/documentation/YubiKit":{"role":"collection","type":"topic","images":[{"identifier":"documentation-header.png","type":"icon"}],"title":"YubiKit","kind":"symbol","abstract":[{"type":"text","text":"Connect and run commands on the different applications on a YubiKey. The framework support connecting using NFC, Lightning and USB-C."}],"identifier":"doc:\/\/YubiKit\/documentation\/YubiKit","url":"\/documentation\/yubikit"},"doc://YubiKit/documentation/YubiKit/OATHSampleCode":{"abstract":[{"text":"This sample shows how to build an iOS and macOS app that reads TOTP codes from YubiKeys. The app demonstrates establishing connections, managing connection lifecycle, using ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/YubiKit\/documentation\/YubiKit\/OATHSession"},{"text":" to retrieve authentication codes, and ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/YubiKit\/documentation\/YubiKit\/ManagementSession"},{"text":" to get device information.","type":"text"}],"kind":"article","identifier":"doc:\/\/YubiKit\/documentation\/YubiKit\/OATHSampleCode","url":"\/documentation\/yubikit\/oathsamplecode","type":"topic","role":"sampleCode","title":"OATHSample: Basic OATH app showcasing how to integrate the SDK"},"doc://YubiKit/documentation/YubiKit/ManagementSession":{"type":"topic","url":"\/documentation\/yubikit\/managementsession","kind":"symbol","identifier":"doc:\/\/YubiKit\/documentation\/YubiKit\/ManagementSession","abstract":[{"type":"text","text":"An interface to the Management application on the YubiKey."}],"role":"symbol","title":"ManagementSession","navigatorTitle":[{"text":"ManagementSession","kind":"identifier"}],"fragments":[{"text":"actor","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ManagementSession","kind":"identifier"}]}}}
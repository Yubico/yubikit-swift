{"identifier":{"url":"doc:\/\/YubiKit\/documentation\/YubiKit\/PIVToolSampleCode","interfaceLanguage":"swift"},"metadata":{"role":"sampleCode","color":{"standardColorIdentifier":"blue"},"title":"PIVTool: Building PIV applications with YubiKey","modules":[{"name":"YubiKit"}],"roleHeading":"Sample Code"},"primaryContentSections":[{"kind":"content","content":[{"text":"Overview","level":2,"type":"heading","anchor":"overview"},{"inlineContent":[{"type":"text","text":"The PIV tool shows how to build applications that:"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Generate cryptographic keys directly on the YubiKey","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Manage certificates and perform digital signatures","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Handle PIN\/PUK authentication and management keys","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Work with different key types (RSA, ECDSA, Ed25519, X25519)","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Query device capabilities and slot information"}]}]}]},{"inlineContent":[{"text":"This sample demonstrates building secure applications where private keys never leave the YubiKey.","type":"text"}],"type":"paragraph"},{"text":"Building PIV Applications","level":2,"type":"heading","anchor":"Building-PIV-Applications"},{"inlineContent":[{"type":"text","text":"PIV applications provide strong security by keeping private keys in hardware while making them accessible for cryptographic operations. This sample demonstrates the key patterns:"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"inlineContent":[{"text":"Key lifecycle","type":"text"}],"type":"strong"},{"type":"text","text":": Generate keys on-device, get attestation, install certificates"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"inlineContent":[{"type":"text","text":"Cryptographic operations"}],"type":"strong"},{"type":"text","text":": Sign, decrypt, and key agreement operations"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"inlineContent":[{"type":"text","text":"Access control"}],"type":"strong"},{"text":": Handle PIN, PUK, and management key authentication","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Device management","type":"text"}]},{"type":"text","text":": Query capabilities, manage slots, handle different YubiKey models"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Error handling","type":"text"}]},{"type":"text","text":": Graceful handling of authentication failures and device limitations"}]}]}]},{"inlineContent":[{"text":"The typical PIV application workflow involves generating keys directly on the YubiKey, obtaining certificates from a Certificate Authority, then using those keys for authentication, document signing, or encrypted communications.","type":"text"}],"type":"paragraph"},{"text":"Working with PIV Keys","level":2,"type":"heading","anchor":"Working-with-PIV-Keys"},{"text":"Key Generation","level":3,"type":"heading","anchor":"Key-Generation"},{"inlineContent":[{"type":"text","text":"PIV applications typically generate keys directly on the YubiKey to ensure private keys never exist outside the secure element:"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["let publicKey = try await session.generateKey(","    in: .authentication,","    type: .rsa(.bits2048),","    pinPolicy: .always,","    touchPolicy: .never",")"]},{"inlineContent":[{"text":"The key generation returns the public key while keeping the private key secure on the YubiKey. You can generate different key types depending on your needs:","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["\/\/ RSA keys for traditional PKI compatibility","let rsaKey = try await session.generateKey(in: .authentication, type: .rsa(.bits2048))","","\/\/ ECDSA keys for smaller signatures and better performance","let ecKey = try await session.generateKey(in: .signature, type: .ec(.secp256r1))","","\/\/ Ed25519 for modern cryptographic applications","let ed25519Key = try await session.generateKey(in: .cardAuth, type: .ed25519)","","\/\/ X25519 for key agreement\/ECDH operations","let x25519Key = try await session.generateKey(in: .keyManagement, type: .x25519)"]},{"text":"PIN and Touch Policies","level":3,"type":"heading","anchor":"PIN-and-Touch-Policies"},{"inlineContent":[{"text":"When generating keys, you control when authentication is required:","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["let key = try await session.generateKey(","    in: .signature,","    type: .ec(.secp256r1),","    pinPolicy: .once,      \/\/ PIN required once per session","    touchPolicy: .always   \/\/ Physical touch required for each operation",")"]},{"inlineContent":[{"text":"These policies provide different security levels depending on your application’s requirements.","type":"text"}],"type":"paragraph"},{"text":"Key Attestation","level":3,"type":"heading","anchor":"Key-Attestation"},{"inlineContent":[{"type":"text","text":"For compliance requirements, you can prove that keys were generated on the YubiKey:"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["let attestationCert = try await session.attestKey(in: .authentication)","\/\/ This certificate proves the key was generated in hardware, not imported"]},{"inlineContent":[{"type":"text","text":"The attestation certificate is signed by Yubico’s key and provides cryptographic proof that the key was generated on-device and hasn’t been copied or imported."}],"type":"paragraph"},{"text":"Certificate Management","level":2,"type":"heading","anchor":"Certificate-Management"},{"inlineContent":[{"type":"text","text":"PIV applications typically work with X.509 certificates paired with the private keys stored on the YubiKey."}],"type":"paragraph"},{"text":"Storing Certificates","level":3,"type":"heading","anchor":"Storing-Certificates"},{"inlineContent":[{"text":"After generating a key or receiving a signed certificate, store it in the corresponding slot:","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["let certificateData = try Data(contentsOf: certificateURL)","let certificate = try Certificate(derEncoded: Array(certificateData))","","try await session.putCertificate(","    certificate,","    in: .authentication,","    compressed: true  \/\/ Save space on the YubiKey",")"]},{"text":"Reading Certificates","level":3,"type":"heading","anchor":"Reading-Certificates"},{"inlineContent":[{"text":"Applications often need to read certificates for identity verification:","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["let certificate = try await session.getCertificate(in: .authentication)","\/\/ Use the certificate for identity verification, chain building, etc."]},{"text":"Using PIV Keys for Cryptographic Operations","level":2,"type":"heading","anchor":"Using-PIV-Keys-for-Cryptographic-Operations"},{"inlineContent":[{"type":"text","text":"Once you have keys and certificates set up, you can use them for cryptographic operations. The private key never leaves the YubiKey - all operations happen on-device."}],"type":"paragraph"},{"text":"Digital Signatures","level":3,"type":"heading","anchor":"Digital-Signatures"},{"inlineContent":[{"text":"Sign documents, challenges, or any data using the private key:","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["let documentHash = SHA256.hash(data: documentData)","let signature = try await session.sign(","    Data(documentHash),","    in: .signature,","    keyType: .ec(.secp256r1),","    using: .hash(.sha256)",")"]},{"inlineContent":[{"text":"This is commonly used for document signing, authentication challenges, or code signing applications.","type":"text"}],"type":"paragraph"},{"text":"Decryption","level":3,"type":"heading","anchor":"Decryption"},{"inlineContent":[{"type":"text","text":"For applications that encrypt data to the YubiKey’s public key:"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["let decryptedData = try await session.decrypt(","    encryptedData,","    in: .keyManagement,","    using: .pkcs1v15",")"]},{"text":"Key Agreement","level":3,"type":"heading","anchor":"Key-Agreement"},{"inlineContent":[{"type":"text","text":"For secure communications, use ECDH to establish shared secrets:"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["let sharedSecret = try await session.deriveSharedSecret(","    in: .keyManagement,","    with: peerPublicKey",")","\/\/ Use the shared secret for symmetric encryption"]},{"text":"PIV Authentication and Access Control","level":2,"type":"heading","anchor":"PIV-Authentication-and-Access-Control"},{"inlineContent":[{"type":"text","text":"PIV applications need to handle various authentication factors to protect access to private keys."}],"type":"paragraph"},{"text":"PIN Authentication","level":3,"type":"heading","anchor":"PIN-Authentication"},{"inlineContent":[{"type":"text","text":"Most PIV operations require PIN verification:"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["let pinResult = try await session.verifyPin(\"123456\")","switch pinResult {","case .success:","    \/\/ PIN verified, can now use keys with PIN policies","case .fail(let attemptsRemaining):","    \/\/ Handle incorrect PIN, show remaining attempts","case .pinLocked:","    \/\/ PIN is locked, need to use PUK","}"]},{"text":"Management Key Authentication","level":3,"type":"heading","anchor":"Management-Key-Authentication"},{"inlineContent":[{"text":"Administrative operations require management key authentication:","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["let defaultManagementKey = Data(repeating: 0x01, count: 24) + Data(repeating: 0xff, count: 8)","try await session.authenticateWith(managementKey: defaultManagementKey)","","\/\/ Now you can generate keys, install certificates, etc."]},{"inlineContent":[{"type":"text","text":"For production applications, change the default management key:"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["let newKey = Data.random(count: 32)","try await session.setManagementKey(newKey, type: .aes256, requiresTouch: false)"]},{"text":"PIN Unlock (PUK) Operations","level":3,"type":"heading","anchor":"PIN-Unlock-PUK-Operations"},{"inlineContent":[{"text":"When PINs become locked, use the PUK to unlock:","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["try await session.unblockPinWithPuk(\"12345678\", newPin: \"123456\")"]},{"text":"Querying PIV Information","level":2,"type":"heading","anchor":"Querying-PIV-Information"},{"text":"Checking What’s in Each Slot","level":3,"type":"heading","anchor":"Checking-Whats-in-Each-Slot"},{"inlineContent":[{"type":"text","text":"Before using a slot, check what’s already there:"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["let metadata = try await session.getSlotMetadata(.authentication)","if metadata.generatedOnDevice {","    print(\"Key was generated on the YubiKey\")","} else {","    print(\"Key was imported from outside\")","}"]},{"text":"Feature Detection","level":3,"type":"heading","anchor":"Feature-Detection"},{"inlineContent":[{"text":"Different YubiKey models support different features:","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["if await session.supports( .ed25519) {","    \/\/ Use modern Ed25519 keys","} else {","    \/\/ Fall back to RSA or ECDSA","}"]},{"inlineContent":[{"text":"This lets your application adapt to different YubiKey capabilities.","type":"text"}],"type":"paragraph"},{"text":"Error Handling in PIV Applications","level":2,"type":"heading","anchor":"Error-Handling-in-PIV-Applications"},{"inlineContent":[{"type":"text","text":"PIV operations can fail for various reasons - locked PINs, missing authentication, or unsupported operations. The PIV tool demonstrates comprehensive error handling with typed throws:"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["func verifyPinIfProvided(_ pin: String?) async {","    guard let pin = pin else { return }","","    do {","        let result = try await verifyPin(pin)","        switch result {","        case .success:","            break","        case let .fail(retries):","            exitWithError(\"PIN verification failed - \\(retries) tries left.\")","        case .pinLocked:","            exitWithError(\"PIN is blocked.\")","        }","    } catch {","        handlePIVError(error)","    }","}"]},{"inlineContent":[{"text":"The ","type":"text"},{"code":"handlePIVError","type":"codeVoice"},{"text":" helper demonstrates matching on specific ","type":"text"},{"code":"PIVSessionError","type":"codeVoice"},{"text":" cases:","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["func handlePIVError(_ error: PIVSessionError) {","    let message: String","    switch error {","    case let .failedResponse(responseStatus, _):","        let statusHex = String(format: \"0x%04X\", responseStatus.rawStatus)","        message = \"YubiKey responded with status \\(statusHex)\"","    case let .invalidPin(retries, _):","        message = retries > 0 ? \"PIN verification failed - \\(retries) tries left.\" : \"PIN is blocked.\"","    case .pinLocked:","        message = \"PIN is blocked.\"","    case .authenticationFailed:","        message = \"Authentication required.\"","    case .featureNotSupported:","        message = \"Operation not supported by this YubiKey.\"","    \/\/ ... handle other cases","    }","    print(\"Error: \\(message)\")","}"]},{"inlineContent":[{"text":"With typed throws, the compiler ensures you handle all error cases specific to PIV operations.","type":"text"}],"type":"paragraph"}]}],"kind":"article","hierarchy":{"paths":[["doc:\/\/YubiKit\/documentation\/YubiKit"]]},"sampleCodeDownload":{"kind":"sampleDownload","action":{"type":"reference","overridingTitle":"View Source","identifier":"https:\/\/github.com\/Yubico\/yubikit-swift\/tree\/main\/Samples\/yubikit-piv-tool","isActive":true}},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/yubikit\/pivtoolsamplecode"]}],"sections":[],"schemaVersion":{"major":0,"patch":0,"minor":3},"abstract":[{"type":"text","text":"This sample shows how to build applications that use YubiKeys for PIV (Personal Identity Verification) operations. The command-line tool demonstrates using "},{"type":"reference","identifier":"doc:\/\/YubiKit\/documentation\/YubiKit\/PIVSession","isActive":true},{"type":"text","text":" for cryptographic operations, certificate management, and access control."}],"seeAlsoSections":[{"generated":true,"anchor":"Sample-code","title":"Sample code","identifiers":["doc:\/\/YubiKit\/documentation\/YubiKit\/OATHSampleCode"]}],"references":{"doc://YubiKit/documentation/YubiKit/ManagementSession":{"url":"\/documentation\/yubikit\/managementsession","kind":"symbol","fragments":[{"kind":"keyword","text":"actor"},{"kind":"text","text":" "},{"kind":"identifier","text":"ManagementSession"}],"abstract":[{"text":"An interface to the Management application on the YubiKey.","type":"text"}],"title":"ManagementSession","type":"topic","role":"symbol","identifier":"doc:\/\/YubiKit\/documentation\/YubiKit\/ManagementSession","navigatorTitle":[{"kind":"identifier","text":"ManagementSession"}]},"doc://YubiKit/documentation/YubiKit/OATHSession":{"kind":"symbol","title":"OATHSession","abstract":[{"type":"text","text":"An interface to the OATH application on the YubiKey."}],"role":"symbol","fragments":[{"text":"actor","kind":"keyword"},{"text":" ","kind":"text"},{"text":"OATHSession","kind":"identifier"}],"type":"topic","navigatorTitle":[{"text":"OATHSession","kind":"identifier"}],"identifier":"doc:\/\/YubiKit\/documentation\/YubiKit\/OATHSession","url":"\/documentation\/yubikit\/oathsession"},"documentation-header.png":{"type":"image","alt":"YubiKeys in a row","variants":[{"url":"\/images\/YubiKit\/documentation-header@2x.png","traits":["2x","light"]},{"url":"\/images\/YubiKit\/documentation-header~dark@2x.png","traits":["2x","dark"]}],"identifier":"documentation-header.png"},"doc://YubiKit/documentation/YubiKit":{"identifier":"doc:\/\/YubiKit\/documentation\/YubiKit","url":"\/documentation\/yubikit","title":"YubiKit","kind":"symbol","type":"topic","abstract":[{"text":"Connect and run commands on the different applications on a YubiKey. The framework support connecting using NFC, Lightning and USB.","type":"text"}],"images":[{"identifier":"documentation-header.png","type":"icon"}],"role":"collection"},"https://github.com/Yubico/yubikit-swift/tree/main/Samples/yubikit-piv-tool":{"url":"https:\/\/github.com\/Yubico\/yubikit-swift\/tree\/main\/Samples\/yubikit-piv-tool","identifier":"https:\/\/github.com\/Yubico\/yubikit-swift\/tree\/main\/Samples\/yubikit-piv-tool","checksum":null,"type":"download"},"doc://YubiKit/documentation/YubiKit/OATHSampleCode":{"abstract":[{"text":"This sample shows how to build an iOS and macOS app that reads TOTP codes from YubiKeys. The app demonstrates establishing connections, managing connection lifecycle, using ","type":"text"},{"identifier":"doc:\/\/YubiKit\/documentation\/YubiKit\/OATHSession","type":"reference","isActive":true},{"text":" to retrieve authentication codes, and ","type":"text"},{"identifier":"doc:\/\/YubiKit\/documentation\/YubiKit\/ManagementSession","type":"reference","isActive":true},{"text":" to get device information.","type":"text"}],"identifier":"doc:\/\/YubiKit\/documentation\/YubiKit\/OATHSampleCode","role":"sampleCode","type":"topic","title":"OATHSample: Basic OATH app showcasing how to integrate the SDK","kind":"article","url":"\/documentation\/yubikit\/oathsamplecode"},"doc://YubiKit/documentation/YubiKit/PIVSession":{"type":"topic","identifier":"doc:\/\/YubiKit\/documentation\/YubiKit\/PIVSession","abstract":[{"type":"text","text":"An interface to the PIV application on the YubiKey."}],"kind":"symbol","fragments":[{"text":"actor","kind":"keyword"},{"text":" ","kind":"text"},{"text":"PIVSession","kind":"identifier"}],"title":"PIVSession","role":"symbol","url":"\/documentation\/yubikit\/pivsession","navigatorTitle":[{"text":"PIVSession","kind":"identifier"}]}}}
{"abstract":[{"text":"This sample project shows how to integrate the SDK into an iOS and MacOS app. It lists OATH codes","type":"text"},{"type":"text","text":" "},{"text":"using the ","type":"text"},{"type":"reference","identifier":"doc:\/\/YubiKit\/documentation\/YubiKit\/OATHSession","isActive":true},{"text":" and has a separate view that displays the version number of the key. The version","type":"text"},{"type":"text","text":" "},{"type":"text","text":"number is retrieved using the "},{"type":"reference","identifier":"doc:\/\/YubiKit\/documentation\/YubiKit\/ManagementSession","isActive":true},{"text":".","type":"text"}],"sampleCodeDownload":{"kind":"sampleDownload","action":{"overridingTitle":"View Source","type":"reference","identifier":"https:\/\/github.com\/Yubico\/yubikit-swift\/raw\/main\/Samples\/oath-sample.zip","isActive":true}},"metadata":{"title":"OATHSample: Basic OATH app showcasing how to integrate the SDK","color":{"standardColorIdentifier":"green"},"roleHeading":"Sample Code","role":"sampleCode","modules":[{"name":"YubiKit"}]},"variants":[{"paths":["\/documentation\/yubikit\/oathsamplecode"],"traits":[{"interfaceLanguage":"swift"}]}],"schemaVersion":{"patch":0,"major":0,"minor":3},"kind":"article","hierarchy":{"paths":[["doc:\/\/YubiKit\/documentation\/YubiKit"]]},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/YubiKit\/documentation\/YubiKit\/OATHSampleCode"},"sections":[],"primaryContentSections":[{"kind":"content","content":[{"level":2,"text":"Overview","anchor":"overview","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The sample project consist of two views. One that list the OATH codes calculated, either using USB-C, Lightning or NFC."},{"text":" ","type":"text"},{"text":"The other view simply displays the version number of the YubiKey. This view also supports all three connection types.","type":"text"}]},{"name":"Note","content":[{"type":"paragraph","inlineContent":[{"text":"This is only a sample project and there is currently no handling for password protected YubiKeys.","type":"text"}]}],"type":"aside","style":"note"},{"type":"heading","level":2,"text":"OATH view","anchor":"OATH-view"},{"inlineContent":[{"type":"text","text":"The main function of the OATH part of the app is the "},{"type":"codeVoice","code":"startWiredConnection()"},{"type":"text","text":" function. This will cancel any previous"},{"type":"text","text":" "},{"type":"codeVoice","code":"wiredConnectionTask"},{"text":" and create a new one. In the Task it will use the ","type":"text"},{"type":"codeVoice","code":"Connections"},{"type":"text","text":" helper to start waiting for"},{"text":" ","type":"text"},{"text":"a wired connection. Depending on the device this will either be a ","type":"text"},{"type":"codeVoice","code":"LightningConnection"},{"type":"text","text":" or a "},{"identifier":"doc:\/\/YubiKit\/documentation\/YubiKit\/SmartCardConnection","type":"reference","isActive":true},{"text":".","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Once a connection has been established we check that the task hasn’t been cancelled before proceeding."},{"type":"text","text":" "},{"type":"text","text":"The "},{"code":"calculateCodes(connection:)","type":"codeVoice"},{"text":" function creates a new ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/YubiKit\/documentation\/YubiKit\/OATHSession"},{"type":"text","text":" and"},{"text":" ","type":"text"},{"text":"calls ","type":"text"},{"type":"codeVoice","code":".calculateCodes()"},{"text":" on the session. The result is then used to populate the list of codes in the UI.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"At this point the app will wait for the connection to close. This can be caused by the user unplugging the YubiKey or"},{"text":" ","type":"text"},{"text":"a connection error of some sort forcing the connection to close. If the connection is closed the app will clean up","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the user interface and loop around "},{"type":"codeVoice","code":"startWiredConnection()"},{"text":" again.","type":"text"}]},{"type":"codeListing","code":["func startWiredConnection() {","    wiredConnectionTask?.cancel()","    wiredConnectionTask = Task { @MainActor in","        while true {","            do {","                error = nil","                guard !Task.isCancelled else { return }","                \/\/ Wait for a suitable wired connection for the current device.","                let connection = try await WiredConnection.connection()","                guard !Task.isCancelled else { return }","                try await calculateCodes(connection: connection)","                \/\/ Wait for the connection to close, i.e the YubiKey to be unplugged from the device.","                \/\/ If the YubiKey was simply unplugged it will return nil, otherwise the error","                \/\/ causing the disconnect will be returned.","                guard !Task.isCancelled else { return }","                error = await connection.connectionDidClose()","                accounts.removeAll()","                source = \"no connection\"","                continue","            } catch (let e) {","                error = e","                continue","            }","        }","    }","}","","@MainActor private func calculateCodes(connection: Connection) async throws {","    self.error = nil","    let session = try await OATHSession.session(withConnection: connection)","    let result = try await session.calculateCodes()","    self.accounts = result.map { Account(label: $0.0.label, code: $0.1?.code ?? \"****\") }","    self.source = connection.connectionType","}"],"syntax":"swift"},{"anchor":"Settings-view","type":"heading","level":2,"text":"Settings view"},{"type":"paragraph","inlineContent":[{"text":"To bring up the settings view we’ve added a ","type":"text"},{"type":"codeVoice","code":"Button"},{"text":" to the ","type":"text"},{"type":"codeVoice","code":"OATHListView"},{"text":". The button will stop","type":"text"},{"type":"text","text":" "},{"text":"any wired connections and cancel the wait for new connections. It will then present the ","type":"text"},{"type":"codeVoice","code":"SettingsView"},{"type":"text","text":" "},{"text":"as a SwiftUI sheet.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"code":"SettingsModel","type":"codeVoice"},{"text":" is simpler since it will only retrieve the version number once when it appears","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and it does not handle YubiKeys being unplugged and plugged back again. In this case we can use the"},{"text":" ","type":"text"},{"type":"codeVoice","code":"Connection.anyConnection()"},{"text":" function that will return any wired YubiKey that might be connected","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"or, if no wired key is present it will start scanning for a NFC key. Once connected we create"},{"text":" ","type":"text"},{"type":"text","text":"the "},{"type":"reference","identifier":"doc:\/\/YubiKit\/documentation\/YubiKit\/ManagementSession","isActive":true},{"text":" and get the key version.","type":"text"}]},{"code":["func getKeyVersion() {","    Task { @MainActor in","        self.error = nil","        do {","            let connection = try await AnyConnection.connection()","            let session = try await ManagementSession.session(withConnection: connection)","            self.keyVersion = session.version.description","            #if os(iOS)","            if let nfcConnection = connection.nfcConnection {","                self.connection = \"NFC\"","                await nfcConnection.close(message: \"YubiKey version read\")","            } else {","                self.connection = connection as? SmartCardConnection != nil ? \"SmartCard\" : \"Lightning\"","            }","            #else","            self.connection = \"SmartCard\"","            #endif","        } catch {","            self.error = error","        }","    }","}"],"type":"codeListing","syntax":"swift"}]}],"references":{"documentation-header.png":{"identifier":"documentation-header.png","type":"image","alt":"YubiKeys in a row","variants":[{"traits":["2x","light"],"url":"\/images\/YubiKit\/documentation-header@2x.png"},{"traits":["2x","dark"],"url":"\/images\/YubiKit\/documentation-header~dark@2x.png"}]},"doc://YubiKit/documentation/YubiKit/OATHSession":{"title":"OATHSession","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"OATHSession"}],"url":"\/documentation\/yubikit\/oathsession","kind":"symbol","abstract":[{"type":"text","text":"An interface to the OATH application on the YubiKey."}],"type":"topic","identifier":"doc:\/\/YubiKit\/documentation\/YubiKit\/OATHSession","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"text":"OATHSession","kind":"identifier"}]},"doc://YubiKit/documentation/YubiKit":{"title":"YubiKit","role":"collection","url":"\/documentation\/yubikit","kind":"symbol","images":[{"type":"icon","identifier":"documentation-header.png"}],"abstract":[{"type":"text","text":"Connect and run commands on the different applications on a YubiKey. The framework support connecting using NFC, Lightning and USB-C."}],"type":"topic","identifier":"doc:\/\/YubiKit\/documentation\/YubiKit"},"doc://YubiKit/documentation/YubiKit/ManagementSession":{"url":"\/documentation\/yubikit\/managementsession","role":"symbol","fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"ManagementSession"}],"type":"topic","identifier":"doc:\/\/YubiKit\/documentation\/YubiKit\/ManagementSession","navigatorTitle":[{"text":"ManagementSession","kind":"identifier"}],"abstract":[{"type":"text","text":"An interface to the Management application on the YubiKey."}],"kind":"symbol","title":"ManagementSession"},"https://github.com/Yubico/yubikit-swift/raw/main/Samples/oath-sample.zip":{"type":"download","identifier":"https:\/\/github.com\/Yubico\/yubikit-swift\/raw\/main\/Samples\/oath-sample.zip","checksum":null,"url":"https:\/\/github.com\/Yubico\/yubikit-swift\/raw\/main\/Samples\/oath-sample.zip"},"doc://YubiKit/documentation/YubiKit/SmartCardConnection":{"url":"\/documentation\/yubikit\/smartcardconnection","kind":"symbol","abstract":[{"text":"A connection to the YubiKey utilizing the USB-C port and the TKSmartCard implementation from","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the CryptoTokenKit framework."}],"role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"SmartCardConnection","kind":"identifier"}],"navigatorTitle":[{"text":"SmartCardConnection","kind":"identifier"}],"identifier":"doc:\/\/YubiKit\/documentation\/YubiKit\/SmartCardConnection","title":"SmartCardConnection","type":"topic"}}}
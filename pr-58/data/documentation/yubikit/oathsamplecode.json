{"hierarchy":{"paths":[["doc:\/\/YubiKit\/documentation\/YubiKit"]]},"identifier":{"url":"doc:\/\/YubiKit\/documentation\/YubiKit\/OATHSampleCode","interfaceLanguage":"swift"},"schemaVersion":{"patch":0,"major":0,"minor":3},"metadata":{"color":{"standardColorIdentifier":"green"},"title":"OATHSample: Basic OATH app showcasing how to integrate the SDK","modules":[{"name":"YubiKit"}],"roleHeading":"Sample Code","role":"sampleCode"},"abstract":[{"text":"This sample shows how to build an iOS and macOS app that reads TOTP codes from YubiKeys. The app demonstrates establishing connections, managing connection lifecycle, using ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/YubiKit\/documentation\/YubiKit\/OATHSession"},{"text":" to retrieve authentication codes, and ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/YubiKit\/documentation\/YubiKit\/ManagementSession"},{"text":" to get device information.","type":"text"}],"seeAlsoSections":[{"title":"Sample code","identifiers":["doc:\/\/YubiKit\/documentation\/YubiKit\/PIVToolSampleCode"],"generated":true,"anchor":"Sample-code"}],"primaryContentSections":[{"kind":"content","content":[{"level":2,"anchor":"overview","text":"Overview","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The sample creates an authenticator app that:"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Establishes connections to YubiKeys via USB, Lightning, or NFC"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Manages connection lifecycle (detecting plugged\/unplugged devices)","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Lists TOTP codes stored on the YubiKey","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Shows device information like firmware version","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Handles connection errors and user cancellations gracefully","type":"text"}]}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"text":"This sample focuses on read-only operations and doesn’t handle password-protected YubiKeys or credential management.","type":"text"}]},{"level":2,"anchor":"Connection-Management","text":"Connection Management","type":"heading"},{"level":3,"anchor":"Handling-Wired-Connections","text":"Handling Wired Connections","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"The app uses a ","type":"text"},{"code":"ConnectionManager","type":"codeVoice"},{"text":" to handle persistent connections to plugged-in YubiKeys. This approach ensures your app stays responsive when users plug and unplug their YubiKeys:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["private func startWiredConnection() {","    wiredConnectionTask = Task { @MainActor in","        while !Task.isCancelled {","            do {","                let newConnection = try await WiredSmartCardConnection.makeConnection()","                wiredConnection = newConnection","","                \/\/ Wait for disconnection","                let closeError = await newConnection.waitUntilClosed()","                wiredConnection = nil","            } catch {","                self.error = error","            }","        }","    }","}"]},{"type":"paragraph","inlineContent":[{"text":"The key insight here is using ","type":"text"},{"type":"codeVoice","code":"waitUntilClosed()"},{"text":" to detect when the YubiKey is unplugged, then automatically waiting for the next connection.","type":"text"}]},{"level":3,"anchor":"NFC-Connections","text":"NFC Connections","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"NFC connections work differently - they’re initiated by user action and are short-lived:"}]},{"type":"codeListing","syntax":"swift","code":["func requestNFCConnection() async {","    do {","        nfcConnection = try await NFCSmartCardConnection.makeConnection()","    } catch {","        self.error = error","    }","}"]},{"inlineContent":[{"text":"When an NFC connection is established, the app fetches data and immediately closes it with a user message:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["Task {","    await model.update(using: connection)","    await connection.close(message: \"Codes calculated\")","}"]},{"level":2,"type":"heading","anchor":"Working-with-YubiKey-Data","text":"Working with YubiKey Data"},{"level":3,"type":"heading","anchor":"Reading-OATH-Codes","text":"Reading OATH Codes"},{"inlineContent":[{"type":"text","text":"Once you have a connection, getting TOTP codes is straightforward:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["private func calculateCodes(using connection: SmartCardConnection) async {","    do {","        let session = try await OATHSession.makeSession(connection: connection)","        let result = try await session.calculateCodes()","","        accounts = result.map { credential, code in","            Account(","                label: credential.label,","                code: code?.code,","                issuer: credential.issuer,","                type: credential.type","            )","        }","    } catch {","        self.error = error","    }","}"]},{"inlineContent":[{"type":"text","text":"The "},{"code":"calculateCodes()","type":"codeVoice"},{"type":"text","text":" method returns a dictionary mapping credentials to their current codes. Some codes might be "},{"code":"nil","type":"codeVoice"},{"type":"text","text":" if they require touch or are password-protected."}],"type":"paragraph"},{"level":3,"type":"heading","anchor":"Getting-Device-Information","text":"Getting Device Information"},{"inlineContent":[{"text":"Use ","type":"text"},{"code":"ManagementSession","type":"codeVoice"},{"text":" to get YubiKey information:","type":"text"}],"type":"paragraph"},{"code":["private func getKeyVersion(using connection: SmartCardConnection) async {","    do {","        let session = try await ManagementSession.makeSession(connection: connection)","        self.keyVersion = session.version.description","    } catch {","        self.error = error","    }","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"The "},{"code":"Model","type":"codeVoice"},{"type":"text","text":" class combines both operations in a single "},{"code":"update","type":"codeVoice"},{"type":"text","text":" method:"}],"type":"paragraph"},{"code":["func update(using connection: SmartCardConnection) async {","    await calculateCodes(using: connection)","    await getKeyVersion(using: connection)","    connectionType = connection.connectionType","}"],"type":"codeListing","syntax":"swift"},{"anchor":"SwiftUI-Integration","level":2,"type":"heading","text":"SwiftUI Integration"},{"anchor":"Reacting-to-Connection-Changes","level":3,"type":"heading","text":"Reacting to Connection Changes"},{"inlineContent":[{"text":"The app uses SwiftUI’s ","type":"text"},{"type":"codeVoice","code":"@Published"},{"text":" properties and ","type":"text"},{"type":"codeVoice","code":"onReceive"},{"text":" to update the UI when connections change:","type":"text"}],"type":"paragraph"},{"code":[".onReceive(connectionManager.$wiredConnection) { newConnection in","    guard let connection = newConnection else {","        model.clear()  \/\/ Clear UI when YubiKey unplugged","        return","    }","    Task { await model.update(using: connection) }","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"This pattern ensures the UI immediately updates when YubiKeys are plugged in or removed."}],"type":"paragraph"},{"anchor":"Platform-Specific-Features","level":3,"type":"heading","text":"Platform-Specific Features"},{"inlineContent":[{"text":"The app handles iOS vs macOS differences with conditional compilation:","type":"text"}],"type":"paragraph"},{"code":["#if os(iOS)",".refreshable {","    await connectionManager.requestNFCConnection()","}","#endif"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"iOS users can pull-to-refresh to scan with NFC, while macOS users only see USB options.","type":"text"}],"type":"paragraph"},{"anchor":"Error-Handling-in-SwiftUI","level":3,"type":"heading","text":"Error Handling in SwiftUI"},{"inlineContent":[{"type":"text","text":"The sample shows how to handle different types of connection errors:"}],"type":"paragraph"},{"code":[".onReceive(connectionManager.$error) { error in","    switch error {","    case .some(ConnectionError.cancelledByUser):","        return  \/\/ Don't show error for user cancellation","    default:","        model.error = error","    }","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"This prevents showing errors when users intentionally cancel NFC scans."}],"type":"paragraph"},{"anchor":"Connection-Type-Detection","level":3,"type":"heading","text":"Connection Type Detection"},{"inlineContent":[{"text":"The sample includes a useful extension to identify connection types:","type":"text"}],"type":"paragraph"},{"code":["extension SmartCardConnection {","    var connectionType: String {","        switch self {","        case _ as NFCSmartCardConnection: return \"NFC\"","        case _ as LightningSmartCardConnection: return \"Lightning\"","        case _ as USBSmartCardConnection: return \"USB\"","        default: return \"Unknown\"","        }","    }","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"This is helpful because NFC connections are slower than USB, and users like to know how their YubiKey is connected.","type":"text"}],"type":"paragraph"},{"anchor":"Architecture-Decisions","level":2,"type":"heading","text":"Architecture Decisions"},{"anchor":"Why-the-connection-management-works-this-way","level":3,"type":"heading","text":"Why the connection management works this way"},{"inlineContent":[{"text":"The sample uses a background loop that continuously waits for wired connections. This might seem unusual, but it solves a key problem: YubiKeys get plugged and unplugged frequently, but apps need to stay responsive.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"When you unplug your YubiKey, the app doesn’t crash or freeze - it detects the disconnection via "},{"type":"codeVoice","code":"waitUntilClosed()"},{"type":"text","text":" and immediately starts waiting for the next YubiKey. This creates a smoother user experience where the app responds when you plug \/ unplug a YubiKey."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"NFC works differently since you can’t continuously scan - the user has to explicitly initiate each scan. That’s why NFC connections are handled separately through user actions like the scan button or pull-to-refresh."}],"type":"paragraph"},{"anchor":"Error-handling-for-hardware-connections","level":3,"type":"heading","text":"Error handling for hardware connections"},{"inlineContent":[{"text":"Hardware connections are unreliable by nature. Users will unplug devices mid-operation, walk away during NFC scans, or have connectivity issues. The sample handles this gracefully:","type":"text"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Connection failures are caught and stored as errors","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"User cancellations (like dismissing NFC scan) are filtered out to avoid unnecessary error alerts","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Session errors are handled similarly - show the error but maintain app functionality","type":"text"}]}]}]},{"anchor":"Working-with-Swift-actors","level":3,"type":"heading","text":"Working with Swift actors"},{"inlineContent":[{"text":"YubiKit sessions are Swift actors that handle their own threading. The sample shows how to integrate this with SwiftUI’s main actor requirements:","type":"text"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"code":"ConnectionManager","type":"codeVoice"},{"text":" runs on ","type":"text"},{"code":"@MainActor","type":"codeVoice"},{"text":" so it can directly update ","type":"text"},{"code":"@Published","type":"codeVoice"},{"text":" properties","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Session calls happen on the session’s actor, then results are passed back to update the UI"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Everything uses "},{"type":"codeVoice","code":"async\/await"}]}]}]}]}],"sampleCodeDownload":{"kind":"sampleDownload","action":{"overridingTitle":"View Source","identifier":"https:\/\/github.com\/Yubico\/yubikit-swift\/tree\/main\/Samples\/OATHSample","type":"reference","isActive":true}},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/yubikit\/oathsamplecode"]}],"sections":[],"kind":"article","references":{"doc://YubiKit/documentation/YubiKit/OATHSession":{"identifier":"doc:\/\/YubiKit\/documentation\/YubiKit\/OATHSession","abstract":[{"type":"text","text":"An interface to the OATH application on the YubiKey."}],"kind":"symbol","navigatorTitle":[{"text":"OATHSession","kind":"identifier"}],"type":"topic","title":"OATHSession","role":"symbol","url":"\/documentation\/yubikit\/oathsession","fragments":[{"text":"actor","kind":"keyword"},{"text":" ","kind":"text"},{"text":"OATHSession","kind":"identifier"}]},"doc://YubiKit/documentation/YubiKit/PIVToolSampleCode":{"title":"PIVTool: Building PIV applications with YubiKey","identifier":"doc:\/\/YubiKit\/documentation\/YubiKit\/PIVToolSampleCode","abstract":[{"text":"This sample shows how to build applications that use YubiKeys for PIV (Personal Identity Verification) operations. The command-line tool demonstrates using ","type":"text"},{"isActive":true,"identifier":"doc:\/\/YubiKit\/documentation\/YubiKit\/PIVSession","type":"reference"},{"text":" for cryptographic operations, certificate management, and access control.","type":"text"}],"kind":"article","type":"topic","url":"\/documentation\/yubikit\/pivtoolsamplecode","role":"sampleCode"},"documentation-header.png":{"alt":"YubiKeys in a row","type":"image","variants":[{"url":"\/images\/YubiKit\/documentation-header@2x.png","traits":["2x","light"]},{"url":"\/images\/YubiKit\/documentation-header~dark@2x.png","traits":["2x","dark"]}],"identifier":"documentation-header.png"},"doc://YubiKit/documentation/YubiKit":{"images":[{"identifier":"documentation-header.png","type":"icon"}],"type":"topic","role":"collection","identifier":"doc:\/\/YubiKit\/documentation\/YubiKit","kind":"symbol","title":"YubiKit","url":"\/documentation\/yubikit","abstract":[{"text":"Connect and run commands on the different applications on a YubiKey. The framework support connecting using NFC, Lightning and USB-C.","type":"text"}]},"doc://YubiKit/documentation/YubiKit/ManagementSession":{"kind":"symbol","type":"topic","abstract":[{"type":"text","text":"An interface to the Management application on the YubiKey."}],"title":"ManagementSession","fragments":[{"kind":"keyword","text":"actor"},{"kind":"text","text":" "},{"kind":"identifier","text":"ManagementSession"}],"navigatorTitle":[{"kind":"identifier","text":"ManagementSession"}],"url":"\/documentation\/yubikit\/managementsession","identifier":"doc:\/\/YubiKit\/documentation\/YubiKit\/ManagementSession","role":"symbol"},"doc://YubiKit/documentation/YubiKit/PIVSession":{"kind":"symbol","fragments":[{"text":"actor","kind":"keyword"},{"text":" ","kind":"text"},{"text":"PIVSession","kind":"identifier"}],"type":"topic","role":"symbol","navigatorTitle":[{"text":"PIVSession","kind":"identifier"}],"title":"PIVSession","url":"\/documentation\/yubikit\/pivsession","abstract":[{"text":"An interface to the PIV application on the YubiKey.","type":"text"}],"identifier":"doc:\/\/YubiKit\/documentation\/YubiKit\/PIVSession"},"https://github.com/Yubico/yubikit-swift/tree/main/Samples/OATHSample":{"identifier":"https:\/\/github.com\/Yubico\/yubikit-swift\/tree\/main\/Samples\/OATHSample","type":"download","checksum":null,"url":"https:\/\/github.com\/Yubico\/yubikit-swift\/tree\/main\/Samples\/OATHSample"}}}
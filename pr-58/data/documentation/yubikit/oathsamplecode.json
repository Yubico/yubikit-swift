{"identifier":{"url":"doc:\/\/YubiKit\/documentation\/YubiKit\/OATHSampleCode","interfaceLanguage":"swift"},"seeAlsoSections":[{"identifiers":["doc:\/\/YubiKit\/documentation\/YubiKit\/PIVToolSampleCode"],"anchor":"Sample-code","generated":true,"title":"Sample code"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/yubikit\/oathsamplecode"]}],"primaryContentSections":[{"kind":"content","content":[{"level":2,"text":"Overview","anchor":"overview","type":"heading"},{"inlineContent":[{"type":"text","text":"The sample creates an authenticator app that:"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"Establishes connections to YubiKeys via USB, Lightning, or NFC"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Manages connection lifecycle (detecting plugged\/unplugged devices)","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Lists TOTP codes stored on the YubiKey"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Shows device information like firmware version","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Handles connection errors and user cancellations gracefully"}]}]}],"type":"unorderedList"},{"inlineContent":[{"type":"text","text":"This sample focuses on read-only operations and doesn’t handle password-protected YubiKeys or credential management."}],"type":"paragraph"},{"level":2,"text":"Connection Management","anchor":"Connection-Management","type":"heading"},{"level":3,"text":"Handling Wired Connections","anchor":"Handling-Wired-Connections","type":"heading"},{"inlineContent":[{"text":"The app uses a ","type":"text"},{"code":"ConnectionManager","type":"codeVoice"},{"text":" to handle persistent connections to plugged-in YubiKeys. This approach ensures your app stays responsive when users plug and unplug their YubiKeys:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["private func startWiredConnection() {","    wiredConnectionTask = Task { @MainActor in","        while !Task.isCancelled {","            do {","                let newConnection = try await WiredSmartCardConnection.connection()","                wiredConnection = newConnection","","                \/\/ Wait for disconnection","                let closeError = await newConnection.connectionDidClose()","                wiredConnection = nil","            } catch {","                self.error = error","            }","        }","    }","}"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"The key insight here is using "},{"type":"codeVoice","code":"connectionDidClose()"},{"type":"text","text":" to detect when the YubiKey is unplugged, then automatically waiting for the next connection."}],"type":"paragraph"},{"level":3,"text":"NFC Connections","anchor":"NFC-Connections","type":"heading"},{"inlineContent":[{"type":"text","text":"NFC connections work differently - they’re initiated by user action and are short-lived:"}],"type":"paragraph"},{"syntax":"swift","code":["func requestNFCConnection() async {","    do {","        nfcConnection = try await NFCSmartCardConnection.connection()","    } catch {","        self.error = error","    }","}"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"When an NFC connection is established, the app fetches data and immediately closes it with a user message:"}],"type":"paragraph"},{"syntax":"swift","code":["Task {","    await model.update(using: connection)","    await connection.close(message: \"Codes calculated\")","}"],"type":"codeListing"},{"level":2,"text":"Working with YubiKey Data","anchor":"Working-with-YubiKey-Data","type":"heading"},{"level":3,"text":"Reading OATH Codes","anchor":"Reading-OATH-Codes","type":"heading"},{"inlineContent":[{"text":"Once you have a connection, getting TOTP codes is straightforward:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["private func calculateCodes(using connection: SmartCardConnection) async {","    do {","        let session = try await OATHSession.session(connection: connection)","        let result = try await session.calculateCodes()","","        accounts = result.map { credential, code in","            Account(","                label: credential.label,","                code: code?.code,","                issuer: credential.issuer,","                type: credential.type","            )","        }","    } catch {","        self.error = error","    }","}"],"type":"codeListing"},{"inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"calculateCodes()"},{"text":" method returns a dictionary mapping credentials to their current codes. Some codes might be ","type":"text"},{"type":"codeVoice","code":"nil"},{"text":" if they require touch or are password-protected.","type":"text"}],"type":"paragraph"},{"level":3,"text":"Getting Device Information","anchor":"Getting-Device-Information","type":"heading"},{"inlineContent":[{"text":"Use ","type":"text"},{"code":"ManagementSession","type":"codeVoice"},{"text":" to get YubiKey information:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["private func getKeyVersion(using connection: SmartCardConnection) async {","    do {","        let session = try await ManagementSession.session(connection: connection)","        self.keyVersion = session.version.description","    } catch {","        self.error = error","    }","}"],"type":"codeListing"},{"inlineContent":[{"text":"The ","type":"text"},{"code":"Model","type":"codeVoice"},{"text":" class combines both operations in a single ","type":"text"},{"code":"update","type":"codeVoice"},{"text":" method:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["func update(using connection: SmartCardConnection) async {","    await calculateCodes(using: connection)","    await getKeyVersion(using: connection)","    connectionType = connection.connectionType","}"],"type":"codeListing"},{"level":2,"text":"SwiftUI Integration","anchor":"SwiftUI-Integration","type":"heading"},{"level":3,"text":"Reacting to Connection Changes","anchor":"Reacting-to-Connection-Changes","type":"heading"},{"inlineContent":[{"text":"The app uses SwiftUI’s ","type":"text"},{"code":"@Published","type":"codeVoice"},{"text":" properties and ","type":"text"},{"code":"onReceive","type":"codeVoice"},{"text":" to update the UI when connections change:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":[".onReceive(connectionManager.$wiredConnection) { newConnection in","    guard let connection = newConnection else {","        model.clear()  \/\/ Clear UI when YubiKey unplugged","        return","    }","    Task { await model.update(using: connection) }","}"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"This pattern ensures the UI immediately updates when YubiKeys are plugged in or removed."}],"type":"paragraph"},{"level":3,"text":"Platform-Specific Features","anchor":"Platform-Specific-Features","type":"heading"},{"inlineContent":[{"text":"The app handles iOS vs macOS differences with conditional compilation:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["#if os(iOS)",".refreshable {","    await connectionManager.requestNFCConnection()","}","#endif"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"iOS users can pull-to-refresh to scan with NFC, while macOS users only see USB options."}],"type":"paragraph"},{"level":3,"text":"Error Handling in SwiftUI","anchor":"Error-Handling-in-SwiftUI","type":"heading"},{"inlineContent":[{"type":"text","text":"The sample shows how to handle different types of connection errors:"}],"type":"paragraph"},{"syntax":"swift","code":[".onReceive(connectionManager.$error) { error in","    switch error {","    case .some(ConnectionError.cancelledByUser):","        return  \/\/ Don't show error for user cancellation","    default:","        model.error = error","    }","}"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"This prevents showing errors when users intentionally cancel NFC scans."}],"type":"paragraph"},{"level":3,"text":"Connection Type Detection","anchor":"Connection-Type-Detection","type":"heading"},{"inlineContent":[{"text":"The sample includes a useful extension to identify connection types:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["extension SmartCardConnection {","    var connectionType: String {","        switch self {","        case _ as NFCSmartCardConnection: return \"NFC\"","        case _ as LightningSmartCardConnection: return \"Lightning\"","        case _ as USBSmartCardConnection: return \"USB\"","        default: return \"Unknown\"","        }","    }","}"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"This is helpful because NFC connections are slower than USB, and users like to know how their YubiKey is connected."}],"type":"paragraph"},{"level":2,"text":"Architecture Decisions","anchor":"Architecture-Decisions","type":"heading"},{"level":3,"text":"Why the connection management works this way","anchor":"Why-the-connection-management-works-this-way","type":"heading"},{"inlineContent":[{"text":"The sample uses a background loop that continuously waits for wired connections. This might seem unusual, but it solves a key problem: YubiKeys get plugged and unplugged frequently, but apps need to stay responsive.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"When you unplug your YubiKey, the app doesn’t crash or freeze - it detects the disconnection via ","type":"text"},{"code":"connectionDidClose()","type":"codeVoice"},{"text":" and immediately starts waiting for the next YubiKey. This creates a smoother user experience where the app responds when you plug \/ unplug a YubiKey.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"NFC works differently since you can’t continuously scan - the user has to explicitly initiate each scan. That’s why NFC connections are handled separately through user actions like the scan button or pull-to-refresh.","type":"text"}],"type":"paragraph"},{"level":3,"text":"Error handling for hardware connections","anchor":"Error-handling-for-hardware-connections","type":"heading"},{"inlineContent":[{"type":"text","text":"Hardware connections are unreliable by nature. Users will unplug devices mid-operation, walk away during NFC scans, or have connectivity issues. The sample handles this gracefully:"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"Connection failures are caught and stored as errors"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"User cancellations (like dismissing NFC scan) are filtered out to avoid unnecessary error alerts","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Session errors are handled similarly - show the error but maintain app functionality","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"},{"level":3,"text":"Working with Swift actors","anchor":"Working-with-Swift-actors","type":"heading"},{"inlineContent":[{"type":"text","text":"YubiKit sessions are Swift actors that handle their own threading. The sample shows how to integrate this with SwiftUI’s main actor requirements:"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"ConnectionManager"},{"type":"text","text":" runs on "},{"type":"codeVoice","code":"@MainActor"},{"type":"text","text":" so it can directly update "},{"type":"codeVoice","code":"@Published"},{"type":"text","text":" properties"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Session calls happen on the session’s actor, then results are passed back to update the UI"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Everything uses "},{"type":"codeVoice","code":"async\/await"}]}]}],"type":"unorderedList"}]}],"sampleCodeDownload":{"kind":"sampleDownload","action":{"overridingTitle":"View Source","identifier":"https:\/\/github.com\/Yubico\/yubikit-swift\/tree\/main\/Samples\/OATHSample","type":"reference","isActive":true}},"kind":"article","sections":[],"schemaVersion":{"major":0,"minor":3,"patch":0},"hierarchy":{"paths":[["doc:\/\/YubiKit\/documentation\/YubiKit"]]},"metadata":{"roleHeading":"Sample Code","title":"OATHSample: Basic OATH app showcasing how to integrate the SDK","color":{"standardColorIdentifier":"green"},"role":"sampleCode","modules":[{"name":"YubiKit"}]},"abstract":[{"type":"text","text":"This sample shows how to build an iOS and macOS app that reads TOTP codes from YubiKeys. The app demonstrates establishing connections, managing connection lifecycle, using "},{"type":"reference","identifier":"doc:\/\/YubiKit\/documentation\/YubiKit\/OATHSession","isActive":true},{"type":"text","text":" to retrieve authentication codes, and "},{"type":"reference","identifier":"doc:\/\/YubiKit\/documentation\/YubiKit\/ManagementSession","isActive":true},{"type":"text","text":" to get device information."}],"references":{"doc://YubiKit/documentation/YubiKit":{"url":"\/documentation\/yubikit","kind":"symbol","identifier":"doc:\/\/YubiKit\/documentation\/YubiKit","images":[{"type":"icon","identifier":"documentation-header.png"}],"title":"YubiKit","abstract":[{"type":"text","text":"Connect and run commands on the different applications on a YubiKey. The framework support connecting using NFC, Lightning and USB-C."}],"role":"collection","type":"topic"},"doc://YubiKit/documentation/YubiKit/PIVSession":{"abstract":[{"text":"An interface to the PIV application on the YubiKey.","type":"text"}],"role":"symbol","fragments":[{"kind":"keyword","text":"actor"},{"kind":"text","text":" "},{"kind":"identifier","text":"PIVSession"}],"navigatorTitle":[{"kind":"identifier","text":"PIVSession"}],"url":"\/documentation\/yubikit\/pivsession","identifier":"doc:\/\/YubiKit\/documentation\/YubiKit\/PIVSession","kind":"symbol","title":"PIVSession","type":"topic"},"doc://YubiKit/documentation/YubiKit/ManagementSession":{"navigatorTitle":[{"text":"ManagementSession","kind":"identifier"}],"type":"topic","role":"symbol","fragments":[{"text":"actor","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ManagementSession","kind":"identifier"}],"identifier":"doc:\/\/YubiKit\/documentation\/YubiKit\/ManagementSession","abstract":[{"text":"An interface to the Management application on the YubiKey.","type":"text"}],"kind":"symbol","title":"ManagementSession","url":"\/documentation\/yubikit\/managementsession"},"doc://YubiKit/documentation/YubiKit/OATHSession":{"role":"symbol","fragments":[{"text":"actor","kind":"keyword"},{"text":" ","kind":"text"},{"text":"OATHSession","kind":"identifier"}],"type":"topic","abstract":[{"text":"An interface to the OATH application on the YubiKey.","type":"text"}],"kind":"symbol","identifier":"doc:\/\/YubiKit\/documentation\/YubiKit\/OATHSession","navigatorTitle":[{"text":"OATHSession","kind":"identifier"}],"title":"OATHSession","url":"\/documentation\/yubikit\/oathsession"},"https://github.com/Yubico/yubikit-swift/tree/main/Samples/OATHSample":{"checksum":null,"type":"download","url":"https:\/\/github.com\/Yubico\/yubikit-swift\/tree\/main\/Samples\/OATHSample","identifier":"https:\/\/github.com\/Yubico\/yubikit-swift\/tree\/main\/Samples\/OATHSample"},"doc://YubiKit/documentation/YubiKit/PIVToolSampleCode":{"url":"\/documentation\/yubikit\/pivtoolsamplecode","identifier":"doc:\/\/YubiKit\/documentation\/YubiKit\/PIVToolSampleCode","type":"topic","title":"PIVTool: Building PIV applications with YubiKey","kind":"article","abstract":[{"type":"text","text":"This sample shows how to build applications that use YubiKeys for PIV (Personal Identity Verification) operations. The command-line tool demonstrates using "},{"type":"reference","isActive":true,"identifier":"doc:\/\/YubiKit\/documentation\/YubiKit\/PIVSession"},{"type":"text","text":" for cryptographic operations, certificate management, and access control."}],"role":"sampleCode"},"documentation-header.png":{"type":"image","identifier":"documentation-header.png","alt":"YubiKeys in a row","variants":[{"traits":["2x","light"],"url":"\/images\/YubiKit\/documentation-header@2x.png"},{"traits":["2x","dark"],"url":"\/images\/YubiKit\/documentation-header~dark@2x.png"}]}}}
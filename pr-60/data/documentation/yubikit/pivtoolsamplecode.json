{"identifier":{"url":"doc:\/\/YubiKit\/documentation\/YubiKit\/PIVToolSampleCode","interfaceLanguage":"swift"},"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"metadata":{"modules":[{"name":"YubiKit"}],"roleHeading":"Sample Code","title":"PIVTool: Building PIV applications with YubiKey","color":{"standardColorIdentifier":"blue"},"role":"sampleCode"},"hierarchy":{"paths":[["doc:\/\/YubiKit\/documentation\/YubiKit"]]},"kind":"article","sampleCodeDownload":{"kind":"sampleDownload","action":{"type":"reference","identifier":"https:\/\/github.com\/Yubico\/yubikit-swift\/tree\/main\/Samples\/yubikit-piv-tool","overridingTitle":"View Source","isActive":true}},"seeAlsoSections":[{"anchor":"Sample-code","generated":true,"title":"Sample code","identifiers":["doc:\/\/YubiKit\/documentation\/YubiKit\/OATHSampleCode"]}],"primaryContentSections":[{"kind":"content","content":[{"level":2,"text":"Overview","anchor":"overview","type":"heading"},{"inlineContent":[{"type":"text","text":"The PIV tool shows how to build applications that:"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Generate cryptographic keys directly on the YubiKey","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Manage certificates and perform digital signatures","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Handle PIN\/PUK authentication and management keys","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Work with different key types (RSA, ECDSA, Ed25519, X25519)"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Query device capabilities and slot information","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"},{"inlineContent":[{"type":"text","text":"This sample demonstrates building secure applications where private keys never leave the YubiKey."}],"type":"paragraph"},{"level":2,"text":"Building PIV Applications","anchor":"Building-PIV-Applications","type":"heading"},{"inlineContent":[{"text":"PIV applications provide strong security by keeping private keys in hardware while making them accessible for cryptographic operations. This sample demonstrates the key patterns:","type":"text"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Key lifecycle"}]},{"type":"text","text":": Generate keys on-device, get attestation, install certificates"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Cryptographic operations","type":"text"}]},{"type":"text","text":": Sign, decrypt, and key agreement operations"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Access control","type":"text"}]},{"type":"text","text":": Handle PIN, PUK, and management key authentication"}]}]},{"content":[{"inlineContent":[{"inlineContent":[{"type":"text","text":"Device management"}],"type":"strong"},{"type":"text","text":": Query capabilities, manage slots, handle different YubiKey models"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Error handling","type":"text"}],"type":"strong"},{"text":": Graceful handling of authentication failures and device limitations","type":"text"}]}]}],"type":"unorderedList"},{"inlineContent":[{"text":"The typical PIV application workflow involves generating keys directly on the YubiKey, obtaining certificates from a Certificate Authority, then using those keys for authentication, document signing, or encrypted communications.","type":"text"}],"type":"paragraph"},{"level":2,"text":"Working with PIV Keys","anchor":"Working-with-PIV-Keys","type":"heading"},{"level":3,"text":"Key Generation","anchor":"Key-Generation","type":"heading"},{"inlineContent":[{"text":"PIV applications typically generate keys directly on the YubiKey to ensure private keys never exist outside the secure element:","type":"text"}],"type":"paragraph"},{"code":["let publicKey = try await session.generateKey(","    in: .authentication,","    type: .rsa(.bits2048),","    pinPolicy: .always,","    touchPolicy: .never",")"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"The key generation returns the public key while keeping the private key secure on the YubiKey. You can generate different key types depending on your needs:"}],"type":"paragraph"},{"code":["\/\/ RSA keys for traditional PKI compatibility","let rsaKey = try await session.generateKey(in: .authentication, type: .rsa(.bits2048))","","\/\/ ECDSA keys for smaller signatures and better performance","let ecKey = try await session.generateKey(in: .signature, type: .ec(.secp256r1))","","\/\/ Ed25519 for modern cryptographic applications","let ed25519Key = try await session.generateKey(in: .cardAuthentication, type: .ed25519)","","\/\/ X25519 for key agreement\/ECDH operations","let x25519Key = try await session.generateKey(in: .keyManagement, type: .x25519)"],"syntax":"swift","type":"codeListing"},{"level":3,"text":"PIN and Touch Policies","anchor":"PIN-and-Touch-Policies","type":"heading"},{"inlineContent":[{"type":"text","text":"When generating keys, you control when authentication is required:"}],"type":"paragraph"},{"code":["let key = try await session.generateKey(","    in: .signature,","    type: .ec(.secp256r1),","    pinPolicy: .once,      \/\/ PIN required once per session","    touchPolicy: .always   \/\/ Physical touch required for each operation",")"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"These policies provide different security levels depending on your application’s requirements."}],"type":"paragraph"},{"level":3,"text":"Key Attestation","anchor":"Key-Attestation","type":"heading"},{"inlineContent":[{"text":"For compliance requirements, you can prove that keys were generated on the YubiKey:","type":"text"}],"type":"paragraph"},{"code":["let attestationCert = try await session.attestKey(in: .authentication)","\/\/ This certificate proves the key was generated in hardware, not imported"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"The attestation certificate is signed by Yubico’s key and provides cryptographic proof that the key was generated on-device and hasn’t been copied or imported."}],"type":"paragraph"},{"level":2,"text":"Certificate Management","anchor":"Certificate-Management","type":"heading"},{"inlineContent":[{"type":"text","text":"PIV applications typically work with X.509 certificates paired with the private keys stored on the YubiKey."}],"type":"paragraph"},{"level":3,"text":"Storing Certificates","anchor":"Storing-Certificates","type":"heading"},{"inlineContent":[{"type":"text","text":"After generating a key or receiving a signed certificate, store it in the corresponding slot:"}],"type":"paragraph"},{"code":["let certificateData = try Data(contentsOf: certificateURL)","let certificate = try Certificate(derEncoded: Array(certificateData))","","try await session.store(","    certificate: certificate,","    in: .authentication,","    compress: true  \/\/ Save space on the YubiKey",")"],"syntax":"swift","type":"codeListing"},{"level":3,"text":"Reading Certificates","anchor":"Reading-Certificates","type":"heading"},{"inlineContent":[{"text":"Applications often need to read certificates for identity verification:","type":"text"}],"type":"paragraph"},{"code":["let certificate = try await session.getCertificate(in: .authentication)","\/\/ Use the certificate for identity verification, chain building, etc."],"syntax":"swift","type":"codeListing"},{"level":2,"text":"Using PIV Keys for Cryptographic Operations","anchor":"Using-PIV-Keys-for-Cryptographic-Operations","type":"heading"},{"inlineContent":[{"type":"text","text":"Once you have keys and certificates set up, you can use them for cryptographic operations. The private key never leaves the YubiKey - all operations happen on-device."}],"type":"paragraph"},{"level":3,"text":"Digital Signatures","anchor":"Digital-Signatures","type":"heading"},{"inlineContent":[{"text":"Sign documents, challenges, or any data using the private key:","type":"text"}],"type":"paragraph"},{"code":["let documentHash = SHA256.hash(data: documentData)","let signature = try await session.signWithKeyInSlot(","    .signature,","    keyType: .ec(.secp256r1),","    algorithm: .ecdsaSignatureMessageX962SHA256,","    message: Data(documentHash)",")"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"text":"This is commonly used for document signing, authentication challenges, or code signing applications.","type":"text"}],"type":"paragraph"},{"level":3,"text":"Decryption","anchor":"Decryption","type":"heading"},{"inlineContent":[{"type":"text","text":"For applications that encrypt data to the YubiKey’s public key:"}],"type":"paragraph"},{"code":["let decryptedData = try await session.decrypt(","    encryptedData,","    in: .keyManagement,","    using: .pkcs1v15",")"],"syntax":"swift","type":"codeListing"},{"level":3,"text":"Key Agreement","anchor":"Key-Agreement","type":"heading"},{"inlineContent":[{"type":"text","text":"For secure communications, use ECDH to establish shared secrets:"}],"type":"paragraph"},{"code":["let sharedSecret = try await session.deriveSharedSecret(","    in: .keyManagement,","    with: peerPublicKey",")","\/\/ Use the shared secret for symmetric encryption"],"syntax":"swift","type":"codeListing"},{"level":2,"text":"PIV Authentication and Access Control","anchor":"PIV-Authentication-and-Access-Control","type":"heading"},{"inlineContent":[{"text":"PIV applications need to handle various authentication factors to protect access to private keys.","type":"text"}],"type":"paragraph"},{"level":3,"text":"PIN Authentication","anchor":"PIN-Authentication","type":"heading"},{"inlineContent":[{"text":"Most PIV operations require PIN verification:","type":"text"}],"type":"paragraph"},{"code":["let pinResult = try await session.verifyPin(\"123456\")","switch pinResult {","case .success:","    \/\/ PIN verified, can now use keys with PIN policies","case .fail(let attemptsRemaining):","    \/\/ Handle incorrect PIN, show remaining attempts","case .pinLocked:","    \/\/ PIN is locked, need to use PUK","}"],"syntax":"swift","type":"codeListing"},{"level":3,"text":"Management Key Authentication","anchor":"Management-Key-Authentication","type":"heading"},{"inlineContent":[{"text":"Administrative operations require management key authentication:","type":"text"}],"type":"paragraph"},{"code":["let defaultManagementKey = Data(repeating: 0x01, count: 24) + Data(repeating: 0xff, count: 8)","try await session.authenticateWith(managementKey: defaultManagementKey)","","\/\/ Now you can generate keys, install certificates, etc."],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"For production applications, change the default management key:"}],"type":"paragraph"},{"code":["let newKey = Data.random(count: 32)","try await session.setManagementKey(newKey, type: .aes256, requiresTouch: false)"],"syntax":"swift","type":"codeListing"},{"level":3,"text":"PIN Unlock (PUK) Operations","anchor":"PIN-Unlock-PUK-Operations","type":"heading"},{"inlineContent":[{"text":"When PINs become locked, use the PUK to unlock:","type":"text"}],"type":"paragraph"},{"code":["try await session.unblockPinWithPuk(\"12345678\", newPin: \"123456\")"],"syntax":"swift","type":"codeListing"},{"level":2,"text":"Querying PIV Information","anchor":"Querying-PIV-Information","type":"heading"},{"level":3,"text":"Checking What’s in Each Slot","anchor":"Checking-Whats-in-Each-Slot","type":"heading"},{"inlineContent":[{"type":"text","text":"Before using a slot, check what’s already there:"}],"type":"paragraph"},{"code":["let metadata = try await session.getSlotMetadata(.authentication)","if metadata.generatedOnDevice {","    print(\"Key was generated on the YubiKey\")","} else {","    print(\"Key was imported from outside\")","}"],"syntax":"swift","type":"codeListing"},{"level":3,"text":"Feature Detection","anchor":"Feature-Detection","type":"heading"},{"inlineContent":[{"type":"text","text":"Different YubiKey models support different features:"}],"type":"paragraph"},{"code":["if await session.supports( .ed25519) {","    \/\/ Use modern Ed25519 keys","} else {","    \/\/ Fall back to RSA or ECDSA","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"This lets your application adapt to different YubiKey capabilities."}],"type":"paragraph"},{"level":2,"text":"Error Handling in PIV Applications","anchor":"Error-Handling-in-PIV-Applications","type":"heading"},{"inlineContent":[{"type":"text","text":"PIV operations can fail for various reasons - locked PINs, missing authentication, or unsupported operations:"}],"type":"paragraph"},{"code":["do {","    let result = try await session.verifyPin(pin)","    switch result {","    case .success:","        \/\/ PIN verified successfully","    case .fail(let attemptsRemaining):","        print(\"PIN verification failed. \\(attemptsRemaining) attempts remaining.\")","    case .pinLocked:","        print(\"PIN is locked. Use PUK to unlock.\")","    }","} catch .authenticationFailed {","    print(\"Management key authentication required.\")","} catch {","    print(\"PIN verification error: \\(error)\")","}"],"syntax":"swift","type":"codeListing"}]}],"variants":[{"paths":["\/documentation\/yubikit\/pivtoolsamplecode"],"traits":[{"interfaceLanguage":"swift"}]}],"abstract":[{"type":"text","text":"This sample shows how to build applications that use YubiKeys for PIV (Personal Identity Verification) operations. The command-line tool demonstrates using "},{"identifier":"doc:\/\/YubiKit\/documentation\/YubiKit\/PIVSession","type":"reference","isActive":true},{"type":"text","text":" for cryptographic operations, certificate management, and access control."}],"references":{"doc://YubiKit/documentation/YubiKit/ManagementSession":{"url":"\/documentation\/yubikit\/managementsession","identifier":"doc:\/\/YubiKit\/documentation\/YubiKit\/ManagementSession","title":"ManagementSession","abstract":[{"type":"text","text":"An interface to the Management application on the YubiKey."}],"type":"topic","role":"symbol","fragments":[{"text":"actor","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ManagementSession","kind":"identifier"}],"navigatorTitle":[{"text":"ManagementSession","kind":"identifier"}],"kind":"symbol"},"doc://YubiKit/documentation/YubiKit/OATHSession":{"url":"\/documentation\/yubikit\/oathsession","kind":"symbol","type":"topic","navigatorTitle":[{"text":"OATHSession","kind":"identifier"}],"abstract":[{"text":"An interface to the OATH application on the YubiKey.","type":"text"}],"title":"OATHSession","identifier":"doc:\/\/YubiKit\/documentation\/YubiKit\/OATHSession","fragments":[{"text":"actor","kind":"keyword"},{"text":" ","kind":"text"},{"text":"OATHSession","kind":"identifier"}],"role":"symbol"},"https://github.com/Yubico/yubikit-swift/tree/main/Samples/yubikit-piv-tool":{"type":"download","checksum":null,"identifier":"https:\/\/github.com\/Yubico\/yubikit-swift\/tree\/main\/Samples\/yubikit-piv-tool","url":"https:\/\/github.com\/Yubico\/yubikit-swift\/tree\/main\/Samples\/yubikit-piv-tool"},"doc://YubiKit/documentation/YubiKit/OATHSampleCode":{"role":"sampleCode","title":"OATHSample: Basic OATH app showcasing how to integrate the SDK","identifier":"doc:\/\/YubiKit\/documentation\/YubiKit\/OATHSampleCode","type":"topic","kind":"article","url":"\/documentation\/yubikit\/oathsamplecode","abstract":[{"text":"This sample shows how to build an iOS and macOS app that reads TOTP codes from YubiKeys. The app demonstrates establishing connections, managing connection lifecycle, using ","type":"text"},{"identifier":"doc:\/\/YubiKit\/documentation\/YubiKit\/OATHSession","isActive":true,"type":"reference"},{"text":" to retrieve authentication codes, and ","type":"text"},{"identifier":"doc:\/\/YubiKit\/documentation\/YubiKit\/ManagementSession","isActive":true,"type":"reference"},{"text":" to get device information.","type":"text"}]},"doc://YubiKit/documentation/YubiKit/PIVSession":{"title":"PIVSession","type":"topic","fragments":[{"kind":"keyword","text":"actor"},{"kind":"text","text":" "},{"kind":"identifier","text":"PIVSession"}],"identifier":"doc:\/\/YubiKit\/documentation\/YubiKit\/PIVSession","url":"\/documentation\/yubikit\/pivsession","navigatorTitle":[{"kind":"identifier","text":"PIVSession"}],"role":"symbol","kind":"symbol","abstract":[{"type":"text","text":"An interface to the PIV application on the YubiKey."}]},"documentation-header.png":{"type":"image","variants":[{"traits":["2x","light"],"url":"\/images\/YubiKit\/documentation-header@2x.png"},{"traits":["2x","dark"],"url":"\/images\/YubiKit\/documentation-header~dark@2x.png"}],"identifier":"documentation-header.png","alt":"YubiKeys in a row"},"doc://YubiKit/documentation/YubiKit":{"abstract":[{"text":"Connect and run commands on the different applications on a YubiKey. The framework support connecting using NFC, Lightning and USB-C.","type":"text"}],"title":"YubiKit","images":[{"type":"icon","identifier":"documentation-header.png"}],"type":"topic","url":"\/documentation\/yubikit","role":"collection","kind":"symbol","identifier":"doc:\/\/YubiKit\/documentation\/YubiKit"}}}
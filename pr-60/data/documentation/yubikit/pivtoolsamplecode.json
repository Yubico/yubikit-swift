{"primaryContentSections":[{"content":[{"text":"Overview","level":2,"type":"heading","anchor":"overview"},{"inlineContent":[{"text":"The PIV tool shows how to build applications that:","type":"text"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Generate cryptographic keys directly on the YubiKey","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Manage certificates and perform digital signatures"}]}]},{"content":[{"inlineContent":[{"text":"Handle PIN\/PUK authentication and management keys","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Work with different key types (RSA, ECDSA, Ed25519, X25519)","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Query device capabilities and slot information"}],"type":"paragraph"}]}],"type":"unorderedList"},{"inlineContent":[{"text":"This sample demonstrates building secure applications where private keys never leave the YubiKey.","type":"text"}],"type":"paragraph"},{"text":"Building PIV Applications","level":2,"type":"heading","anchor":"Building-PIV-Applications"},{"inlineContent":[{"type":"text","text":"PIV applications provide strong security by keeping private keys in hardware while making them accessible for cryptographic operations. This sample demonstrates the key patterns:"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"inlineContent":[{"text":"Key lifecycle","type":"text"}],"type":"strong"},{"type":"text","text":": Generate keys on-device, get attestation, install certificates"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Cryptographic operations"}]},{"type":"text","text":": Sign, decrypt, and key agreement operations"}]}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Access control"}]},{"text":": Handle PIN, PUK, and management key authentication","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Device management"}],"type":"strong"},{"text":": Query capabilities, manage slots, handle different YubiKey models","type":"text"}]}]},{"content":[{"inlineContent":[{"inlineContent":[{"text":"Error handling","type":"text"}],"type":"strong"},{"text":": Graceful handling of authentication failures and device limitations","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"},{"inlineContent":[{"text":"The typical PIV application workflow involves generating keys directly on the YubiKey, obtaining certificates from a Certificate Authority, then using those keys for authentication, document signing, or encrypted communications.","type":"text"}],"type":"paragraph"},{"text":"Working with PIV Keys","level":2,"type":"heading","anchor":"Working-with-PIV-Keys"},{"text":"Key Generation","level":3,"type":"heading","anchor":"Key-Generation"},{"inlineContent":[{"text":"PIV applications typically generate keys directly on the YubiKey to ensure private keys never exist outside the secure element:","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["let publicKey = try await session.generateKey(","    in: .authentication,","    type: .rsa(.bits2048),","    pinPolicy: .always,","    touchPolicy: .never",")"]},{"inlineContent":[{"text":"The key generation returns the public key while keeping the private key secure on the YubiKey. You can generate different key types depending on your needs:","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["\/\/ RSA keys for traditional PKI compatibility","let rsaKey = try await session.generateKey(in: .authentication, type: .rsa(.bits2048))","","\/\/ ECDSA keys for smaller signatures and better performance","let ecKey = try await session.generateKey(in: .signature, type: .ec(.secp256r1))","","\/\/ Ed25519 for modern cryptographic applications","let ed25519Key = try await session.generateKey(in: .cardAuthentication, type: .ed25519)","","\/\/ X25519 for key agreement\/ECDH operations","let x25519Key = try await session.generateKey(in: .keyManagement, type: .x25519)"]},{"anchor":"PIN-and-Touch-Policies","type":"heading","level":3,"text":"PIN and Touch Policies"},{"inlineContent":[{"type":"text","text":"When generating keys, you control when authentication is required:"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["let key = try await session.generateKey(","    in: .signature,","    type: .ec(.secp256r1),","    pinPolicy: .once,      \/\/ PIN required once per session","    touchPolicy: .always   \/\/ Physical touch required for each operation",")"]},{"inlineContent":[{"type":"text","text":"These policies provide different security levels depending on your application’s requirements."}],"type":"paragraph"},{"anchor":"Key-Attestation","type":"heading","level":3,"text":"Key Attestation"},{"inlineContent":[{"type":"text","text":"For compliance requirements, you can prove that keys were generated on the YubiKey:"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["let attestationCert = try await session.attestKey(in: .authentication)","\/\/ This certificate proves the key was generated in hardware, not imported"]},{"inlineContent":[{"type":"text","text":"The attestation certificate is signed by Yubico’s key and provides cryptographic proof that the key was generated on-device and hasn’t been copied or imported."}],"type":"paragraph"},{"text":"Certificate Management","level":2,"type":"heading","anchor":"Certificate-Management"},{"inlineContent":[{"type":"text","text":"PIV applications typically work with X.509 certificates paired with the private keys stored on the YubiKey."}],"type":"paragraph"},{"text":"Storing Certificates","level":3,"type":"heading","anchor":"Storing-Certificates"},{"inlineContent":[{"type":"text","text":"After generating a key or receiving a signed certificate, store it in the corresponding slot:"}],"type":"paragraph"},{"code":["let certificateData = try Data(contentsOf: certificateURL)","let certificate = try Certificate(derEncoded: Array(certificateData))","","try await session.store(","    certificate: certificate,","    in: .authentication,","    compress: true  \/\/ Save space on the YubiKey",")"],"type":"codeListing","syntax":"swift"},{"text":"Reading Certificates","level":3,"type":"heading","anchor":"Reading-Certificates"},{"inlineContent":[{"text":"Applications often need to read certificates for identity verification:","type":"text"}],"type":"paragraph"},{"code":["let certificate = try await session.getCertificate(in: .authentication)","\/\/ Use the certificate for identity verification, chain building, etc."],"type":"codeListing","syntax":"swift"},{"text":"Using PIV Keys for Cryptographic Operations","level":2,"type":"heading","anchor":"Using-PIV-Keys-for-Cryptographic-Operations"},{"inlineContent":[{"text":"Once you have keys and certificates set up, you can use them for cryptographic operations. The private key never leaves the YubiKey - all operations happen on-device.","type":"text"}],"type":"paragraph"},{"text":"Digital Signatures","level":3,"type":"heading","anchor":"Digital-Signatures"},{"inlineContent":[{"text":"Sign documents, challenges, or any data using the private key:","type":"text"}],"type":"paragraph"},{"code":["let documentHash = SHA256.hash(data: documentData)","let signature = try await session.signWithKeyInSlot(","    .signature,","    keyType: .ec(.secp256r1),","    algorithm: .ecdsaSignatureMessageX962SHA256,","    message: Data(documentHash)",")"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"This is commonly used for document signing, authentication challenges, or code signing applications."}],"type":"paragraph"},{"text":"Decryption","level":3,"type":"heading","anchor":"Decryption"},{"inlineContent":[{"type":"text","text":"For applications that encrypt data to the YubiKey’s public key:"}],"type":"paragraph"},{"code":["let decryptedData = try await session.decrypt(","    encryptedData,","    in: .keyManagement,","    using: .pkcs1v15",")"],"type":"codeListing","syntax":"swift"},{"text":"Key Agreement","level":3,"type":"heading","anchor":"Key-Agreement"},{"inlineContent":[{"type":"text","text":"For secure communications, use ECDH to establish shared secrets:"}],"type":"paragraph"},{"code":["let sharedSecret = try await session.deriveSharedSecret(","    in: .keyManagement,","    with: peerPublicKey",")","\/\/ Use the shared secret for symmetric encryption"],"type":"codeListing","syntax":"swift"},{"text":"PIV Authentication and Access Control","level":2,"type":"heading","anchor":"PIV-Authentication-and-Access-Control"},{"inlineContent":[{"type":"text","text":"PIV applications need to handle various authentication factors to protect access to private keys."}],"type":"paragraph"},{"text":"PIN Authentication","level":3,"type":"heading","anchor":"PIN-Authentication"},{"inlineContent":[{"type":"text","text":"Most PIV operations require PIN verification:"}],"type":"paragraph"},{"code":["let pinResult = try await session.verifyPin(\"123456\")","switch pinResult {","case .success:","    \/\/ PIN verified, can now use keys with PIN policies","case .fail(let attemptsRemaining):","    \/\/ Handle incorrect PIN, show remaining attempts","case .pinLocked:","    \/\/ PIN is locked, need to use PUK","}"],"type":"codeListing","syntax":"swift"},{"text":"Management Key Authentication","level":3,"type":"heading","anchor":"Management-Key-Authentication"},{"inlineContent":[{"type":"text","text":"Administrative operations require management key authentication:"}],"type":"paragraph"},{"code":["let defaultManagementKey = Data(repeating: 0x01, count: 24) + Data(repeating: 0xff, count: 8)","try await session.authenticateWith(managementKey: defaultManagementKey)","","\/\/ Now you can generate keys, install certificates, etc."],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"For production applications, change the default management key:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["let newKey = Data.random(count: 32)","try await session.setManagementKey(newKey, type: .aes256, requiresTouch: false)"]},{"type":"heading","level":3,"anchor":"PIN-Unlock-PUK-Operations","text":"PIN Unlock (PUK) Operations"},{"type":"paragraph","inlineContent":[{"text":"When PINs become locked, use the PUK to unlock:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["try await session.unblockPinWithPuk(\"12345678\", newPin: \"123456\")"]},{"type":"heading","level":2,"anchor":"Querying-PIV-Information","text":"Querying PIV Information"},{"type":"heading","level":3,"anchor":"Checking-Whats-in-Each-Slot","text":"Checking What’s in Each Slot"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Before using a slot, check what’s already there:"}]},{"type":"codeListing","syntax":"swift","code":["let metadata = try await session.getSlotMetadata(.authentication)","if metadata.generatedOnDevice {","    print(\"Key was generated on the YubiKey\")","} else {","    print(\"Key was imported from outside\")","}"]},{"type":"heading","level":3,"anchor":"Feature-Detection","text":"Feature Detection"},{"type":"paragraph","inlineContent":[{"text":"Different YubiKey models support different features:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["if await session.supports( .ed25519) {","    \/\/ Use modern Ed25519 keys","} else {","    \/\/ Fall back to RSA or ECDSA","}"]},{"type":"paragraph","inlineContent":[{"text":"This lets your application adapt to different YubiKey capabilities.","type":"text"}]},{"type":"heading","level":2,"anchor":"Error-Handling-in-PIV-Applications","text":"Error Handling in PIV Applications"},{"type":"paragraph","inlineContent":[{"type":"text","text":"PIV operations can fail for various reasons - locked PINs, missing authentication, or unsupported operations:"}]},{"type":"codeListing","syntax":"swift","code":["do {","    let result = try await session.verifyPin(pin)","    switch result {","    case .success:","        \/\/ PIN verified successfully","    case .fail(let attemptsRemaining):","        print(\"PIN verification failed. \\(attemptsRemaining) attempts remaining.\")","    case .pinLocked:","        print(\"PIN is locked. Use PUK to unlock.\")","    }","} catch .authenticationFailed {","    print(\"Management key authentication required.\")","} catch {","    print(\"PIN verification error: \\(error)\")","}"]}],"kind":"content"}],"sampleCodeDownload":{"action":{"identifier":"https:\/\/github.com\/Yubico\/yubikit-swift\/tree\/main\/Samples\/yubikit-piv-tool","isActive":true,"overridingTitle":"View Source","type":"reference"},"kind":"sampleDownload"},"schemaVersion":{"major":0,"minor":3,"patch":0},"variants":[{"paths":["\/documentation\/yubikit\/pivtoolsamplecode"],"traits":[{"interfaceLanguage":"swift"}]}],"abstract":[{"type":"text","text":"This sample shows how to build applications that use YubiKeys for PIV (Personal Identity Verification) operations. The command-line tool demonstrates using "},{"type":"reference","identifier":"doc:\/\/YubiKit\/documentation\/YubiKit\/PIVSession","isActive":true},{"type":"text","text":" for cryptographic operations, certificate management, and access control."}],"sections":[],"seeAlsoSections":[{"identifiers":["doc:\/\/YubiKit\/documentation\/YubiKit\/OATHSampleCode"],"anchor":"Sample-code","title":"Sample code","generated":true}],"hierarchy":{"paths":[["doc:\/\/YubiKit\/documentation\/YubiKit"]]},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/YubiKit\/documentation\/YubiKit\/PIVToolSampleCode"},"kind":"article","metadata":{"modules":[{"name":"YubiKit"}],"roleHeading":"Sample Code","color":{"standardColorIdentifier":"blue"},"title":"PIVTool: Building PIV applications with YubiKey","role":"sampleCode"},"references":{"doc://YubiKit/documentation/YubiKit/ManagementSession":{"abstract":[{"text":"An interface to the Management application on the YubiKey.","type":"text"}],"type":"topic","kind":"symbol","role":"symbol","fragments":[{"text":"actor","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ManagementSession","kind":"identifier"}],"navigatorTitle":[{"text":"ManagementSession","kind":"identifier"}],"title":"ManagementSession","identifier":"doc:\/\/YubiKit\/documentation\/YubiKit\/ManagementSession","url":"\/documentation\/yubikit\/managementsession"},"doc://YubiKit/documentation/YubiKit/PIVSession":{"navigatorTitle":[{"text":"PIVSession","kind":"identifier"}],"kind":"symbol","title":"PIVSession","fragments":[{"text":"actor","kind":"keyword"},{"text":" ","kind":"text"},{"text":"PIVSession","kind":"identifier"}],"role":"symbol","url":"\/documentation\/yubikit\/pivsession","abstract":[{"type":"text","text":"An interface to the PIV application on the YubiKey."}],"identifier":"doc:\/\/YubiKit\/documentation\/YubiKit\/PIVSession","type":"topic"},"doc://YubiKit/documentation/YubiKit/OATHSession":{"url":"\/documentation\/yubikit\/oathsession","kind":"symbol","type":"topic","navigatorTitle":[{"text":"OATHSession","kind":"identifier"}],"title":"OATHSession","identifier":"doc:\/\/YubiKit\/documentation\/YubiKit\/OATHSession","abstract":[{"text":"An interface to the OATH application on the YubiKey.","type":"text"}],"role":"symbol","fragments":[{"text":"actor","kind":"keyword"},{"text":" ","kind":"text"},{"text":"OATHSession","kind":"identifier"}]},"doc://YubiKit/documentation/YubiKit":{"abstract":[{"type":"text","text":"Connect and run commands on the different applications on a YubiKey. The framework support connecting using NFC, Lightning and USB-C."}],"images":[{"identifier":"documentation-header.png","type":"icon"}],"kind":"symbol","type":"topic","identifier":"doc:\/\/YubiKit\/documentation\/YubiKit","role":"collection","url":"\/documentation\/yubikit","title":"YubiKit"},"documentation-header.png":{"alt":"YubiKeys in a row","identifier":"documentation-header.png","variants":[{"url":"\/images\/YubiKit\/documentation-header@2x.png","traits":["2x","light"]},{"url":"\/images\/YubiKit\/documentation-header~dark@2x.png","traits":["2x","dark"]}],"type":"image"},"doc://YubiKit/documentation/YubiKit/OATHSampleCode":{"abstract":[{"text":"This sample shows how to build an iOS and macOS app that reads TOTP codes from YubiKeys. The app demonstrates establishing connections, managing connection lifecycle, using ","type":"text"},{"type":"reference","identifier":"doc:\/\/YubiKit\/documentation\/YubiKit\/OATHSession","isActive":true},{"text":" to retrieve authentication codes, and ","type":"text"},{"type":"reference","identifier":"doc:\/\/YubiKit\/documentation\/YubiKit\/ManagementSession","isActive":true},{"text":" to get device information.","type":"text"}],"type":"topic","title":"OATHSample: Basic OATH app showcasing how to integrate the SDK","url":"\/documentation\/yubikit\/oathsamplecode","kind":"article","role":"sampleCode","identifier":"doc:\/\/YubiKit\/documentation\/YubiKit\/OATHSampleCode"},"https://github.com/Yubico/yubikit-swift/tree/main/Samples/yubikit-piv-tool":{"type":"download","identifier":"https:\/\/github.com\/Yubico\/yubikit-swift\/tree\/main\/Samples\/yubikit-piv-tool","url":"https:\/\/github.com\/Yubico\/yubikit-swift\/tree\/main\/Samples\/yubikit-piv-tool","checksum":null}}}
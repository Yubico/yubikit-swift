{"sections":[],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/YubiKit\/documentation\/YubiKit\/OATHSampleCode"},"schemaVersion":{"patch":0,"minor":3,"major":0},"hierarchy":{"paths":[["doc:\/\/YubiKit\/documentation\/YubiKit"]]},"kind":"article","primaryContentSections":[{"content":[{"anchor":"overview","text":"Overview","type":"heading","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"The sample project consist of two views. One that list the OATH codes calculated, either using USB-C, Lightning or NFC."},{"type":"text","text":" "},{"text":"The other view simply displays the version number of the YubiKey. This view also supports all three connection types.","type":"text"}]},{"style":"note","name":"Note","type":"aside","content":[{"inlineContent":[{"type":"text","text":"This is only a sample project and there is currently no handling for password protected YubiKeys."}],"type":"paragraph"}]},{"text":"OATH view","anchor":"OATH-view","level":2,"type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The main function of the OATH part of the app is the "},{"code":"startWiredConnection()","type":"codeVoice"},{"text":" function. This will cancel any previous","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"wiredConnectionTask"},{"type":"text","text":" and create a new one. In the Task it will use the "},{"identifier":"doc:\/\/YubiKit\/documentation\/YubiKit\/ConnectionHelper","isActive":true,"type":"reference"},{"text":" to start waiting for","type":"text"},{"type":"text","text":" "},{"text":"a wired connection. Depending on the device this will either be a ","type":"text"},{"type":"codeVoice","code":"LightningConnection"},{"type":"text","text":" or a "},{"isActive":true,"identifier":"doc:\/\/YubiKit\/documentation\/YubiKit\/SmartCardConnection","type":"reference"},{"text":".","type":"text"},{"text":" ","type":"text"},{"text":"Once a connection has been established we check that the task hasn’t been cancelled before proceeding.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"The "},{"type":"codeVoice","code":"calculateCodes(connection:)"},{"type":"text","text":" function creates a new "},{"type":"reference","isActive":true,"identifier":"doc:\/\/YubiKit\/documentation\/YubiKit\/OATHSession"},{"type":"text","text":" and"},{"type":"text","text":" "},{"text":"calls ","type":"text"},{"code":".calculateCodes()","type":"codeVoice"},{"text":" on the session. The result is then used to populate the list of codes in the UI.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"At this point the app will wait for the connection to close. This can be caused by the user unplugging the YubiKey or"},{"text":" ","type":"text"},{"type":"text","text":"a connection error of some sort forcing the connection to close. If the connection is closed the app will clean up"},{"type":"text","text":" "},{"text":"the user interface and recursively call ","type":"text"},{"type":"codeVoice","code":"startWiredConnection()"},{"type":"text","text":" again."}]},{"type":"codeListing","syntax":"swift","code":["@MainActor func startWiredConnection() {","    wiredConnectionTask?.cancel()","    wiredConnectionTask = Task {","        do {","            error = nil","            \/\/ Wait for a suitable wired connection for the current device.","            let connection = try await ConnectionHelper.anyWiredConnection()","            guard !Task.isCancelled else { return }","            try await self.calculateCodes(connection: connection)","            \/\/ Wait for the connection to close, i.e the YubiKey to be unplugged from the device.","            \/\/ If the YubiKey was simply unplugged it will return nil, otherwise the error","            \/\/ causing the disconnect will be returned.","            self.error = await connection.connectionDidClose()","            self.accounts.removeAll()","            self.source = \"no connection\"","            guard !Task.isCancelled else { return }","            \/\/ Restart the wired connection and go back to waiting for a YubiKey to be","            \/\/ inserted again.","            self.startWiredConnection()","        } catch {","            self.error = error","        }","    }","}","","@MainActor private func calculateCodes(connection: Connection) async throws {","    self.error = nil","    let session = try await OATHSession.session(withConnection: connection)","    let result = try await session.calculateCodes()","    self.accounts = result.map { return Account(label: $0.0.label, code: $0.1?.code ?? \"****\") }","    self.source = connection.connectionType","}"]},{"anchor":"Settings-view","text":"Settings view","type":"heading","level":2},{"type":"paragraph","inlineContent":[{"text":"To bring up the settings view we’ve added a ","type":"text"},{"type":"codeVoice","code":"Button"},{"type":"text","text":" to the "},{"type":"codeVoice","code":"OATHListView"},{"text":". The button will stop","type":"text"},{"type":"text","text":" "},{"text":"any wired connections and cancel the wait for new connections. It will then present the ","type":"text"},{"code":"SettingsView","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"as a SwiftUI sheet."}]},{"type":"codeListing","syntax":"swift","code":["Button(action: { model.stopWiredConnection(); isPresentingSettings.toggle() }) {","    Image(systemName: \"ellipsis.circle\")","}",".sheet(isPresented: $isPresentingSettings, onDismiss: {","    model.startWiredConnection() \/\/ Restart wired connection once the SettingsView has been dismissed.","}, content: {","    SettingsView(model: SettingsModel())","})"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"SettingsModel"},{"text":" is simpler since it will only retrieve the version number once when it appears","type":"text"},{"type":"text","text":" "},{"text":"and it does not handle YubiKeys being unplugged and plugged back again. In this case we can use the","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"ConnectionHelper.anyConnection()"},{"text":" function that will return any wired YubiKey that might be connected","type":"text"},{"text":" ","type":"text"},{"text":"or, if no wired key is present it will start scanning for a NFC key. Once connected we create","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the "},{"identifier":"doc:\/\/YubiKit\/documentation\/YubiKit\/ManagementSession","type":"reference","isActive":true},{"type":"text","text":" and get the key version."}]},{"type":"codeListing","syntax":"swift","code":["@MainActor func getKeyVersion() {","    Task {","        self.error = nil","        do {","            let connection = try await ConnectionHelper.anyConnection()","            let session = try await ManagementSession.session(withConnection: connection)","            self.keyVersion = session.version.description","            #if os(iOS)","            if let nfcConnection = connection.nfcConnection {","                self.connection = \"NFC\"","                await nfcConnection.close(message: \"YubiKey version read\")","            } else {","                self.connection = connection as? SmartCardConnection != nil ? \"SmartCard\" : \"Lightning\"","            }","            #else","            self.connection = \"SmartCard\"","            #endif","        } catch {","            self.error = error","        }","    }","}"]}],"kind":"content"}],"sampleCodeDownload":{"action":{"type":"reference","isActive":true,"identifier":"https:\/\/github.com\/Yubico\/yubikit-swift\/raw\/main\/Samples\/oath-sample.zip","overridingTitle":"View Source"},"kind":"sampleDownload"},"variants":[{"paths":["\/documentation\/yubikit\/oathsamplecode"],"traits":[{"interfaceLanguage":"swift"}]}],"abstract":[{"type":"text","text":"This sample project shows how to integrate the SDK into an iOS and MacOS app. It lists OATH codes"},{"type":"text","text":" "},{"text":"using the ","type":"text"},{"identifier":"doc:\/\/YubiKit\/documentation\/YubiKit\/OATHSession","isActive":true,"type":"reference"},{"type":"text","text":" and has a separate view that displays the version number of the key. The version"},{"type":"text","text":" "},{"type":"text","text":"number is retrieved using the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/YubiKit\/documentation\/YubiKit\/ManagementSession"},{"text":".","type":"text"}],"metadata":{"color":{"standardColorIdentifier":"green"},"roleHeading":"Sample Code","title":"OATHSample: Basic OATH app showcasing how to integrate the SDK","modules":[{"name":"YubiKit"}],"role":"sampleCode"},"references":{"doc://YubiKit/documentation/YubiKit/ManagementSession":{"kind":"symbol","identifier":"doc:\/\/YubiKit\/documentation\/YubiKit\/ManagementSession","title":"ManagementSession","role":"symbol","fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"text":"ManagementSession","kind":"identifier"}],"url":"\/documentation\/yubikit\/managementsession","abstract":[{"text":"An interface to the Management application on the YubiKey.","type":"text"}],"navigatorTitle":[{"text":"ManagementSession","kind":"identifier"}],"type":"topic"},"documentation-header.png":{"type":"image","identifier":"documentation-header.png","alt":"YubiKeys in a row","variants":[{"url":"\/images\/YubiKit\/documentation-header@2x.png","traits":["2x","light"]},{"url":"\/images\/YubiKit\/documentation-header~dark@2x.png","traits":["2x","dark"]}]},"https://github.com/Yubico/yubikit-swift/raw/main/Samples/oath-sample.zip":{"url":"https:\/\/github.com\/Yubico\/yubikit-swift\/raw\/main\/Samples\/oath-sample.zip","type":"download","identifier":"https:\/\/github.com\/Yubico\/yubikit-swift\/raw\/main\/Samples\/oath-sample.zip","checksum":null},"doc://YubiKit/documentation/YubiKit/ConnectionHelper":{"type":"topic","title":"ConnectionHelper","role":"symbol","fragments":[{"text":"enum","kind":"keyword"},{"kind":"text","text":" "},{"text":"ConnectionHelper","kind":"identifier"}],"navigatorTitle":[{"text":"ConnectionHelper","kind":"identifier"}],"abstract":[{"text":"ConnectionHelper simplifies the creation of different connections to the YubiKey. It can either return","type":"text"},{"text":" ","type":"text"},{"text":"a connection of any type from a single function or provide a AsyncSequence implementation allowing","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"you to use a for loop awaiting YubiKeys to be inserted and removed from a device."}],"kind":"symbol","url":"\/documentation\/yubikit\/connectionhelper","identifier":"doc:\/\/YubiKit\/documentation\/YubiKit\/ConnectionHelper"},"doc://YubiKit/documentation/YubiKit/SmartCardConnection":{"kind":"symbol","role":"symbol","type":"topic","identifier":"doc:\/\/YubiKit\/documentation\/YubiKit\/SmartCardConnection","abstract":[{"type":"text","text":"A connection to the YubiKey utilizing the USB-C port and the TKSmartCard implementation from"},{"type":"text","text":" "},{"text":"the CryptoTokenKit framework.","type":"text"}],"navigatorTitle":[{"text":"SmartCardConnection","kind":"identifier"}],"url":"\/documentation\/yubikit\/smartcardconnection","title":"SmartCardConnection","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"SmartCardConnection","kind":"identifier"}]},"doc://YubiKit/documentation/YubiKit":{"url":"\/documentation\/yubikit","title":"YubiKit","identifier":"doc:\/\/YubiKit\/documentation\/YubiKit","kind":"symbol","abstract":[{"type":"text","text":"Connect and run commands on the different applications on a YubiKey. The framework support connecting using NFC, Lightning and USB-C."}],"role":"collection","images":[{"type":"icon","identifier":"documentation-header.png"}],"type":"topic"},"doc://YubiKit/documentation/YubiKit/OATHSession":{"title":"OATHSession","type":"topic","role":"symbol","identifier":"doc:\/\/YubiKit\/documentation\/YubiKit\/OATHSession","url":"\/documentation\/yubikit\/oathsession","kind":"symbol","fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"text":"OATHSession","kind":"identifier"}],"navigatorTitle":[{"text":"OATHSession","kind":"identifier"}],"abstract":[{"type":"text","text":"An interface to the OATH application on the YubiKey."}]}}}